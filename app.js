const feedGrid = document.getElementById("feedGrid");
const rssUrlInput = document.getElementById("rssUrl");
const categorySelect = document.getElementById("categorySelect");
const tabs = document.getElementById("tabs");
const bottomNav = document.getElementById("bottomNav");
const themeIcon = document.getElementById("themeIcon");
const modal = document.getElementById("modal");
const modalContent = document.getElementById("modalContent");
const shareModal = document.getElementById("shareModal");
const shareOptions = document.getElementById("shareOptions");
const linkPreview = document.getElementById("linkPreview");
const feedManageModal = document.getElementById("feedManageModal");
const feedManageOptions = document.getElementById("feedManageOptions");
let feeds = JSON.parse(localStorage.getItem("rssFeeds")) || [];
let feedNames = JSON.parse(localStorage.getItem("feedNames")) || {};
let feedCategories = JSON.parse(localStorage.getItem("feedCategories")) || {};
let categories = JSON.parse(localStorage.getItem("categories")) || [
    "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
];
let currentFeedIndex = 0;
let currentItem = null;
let currentMode = "normal";

// –ö—ç—à –¥–ª—è RSS –ª–µ–Ω—Ç
let feedCache = new Map();
const CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

// –û—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
let loadQueue = [];
let isLoading = false;

// –ë–∞–∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö RSS –ª–µ–Ω—Ç –ø–æ –¥–æ–º–µ–Ω–∞–º
const RECOMMENDED_FEEDS = {
    "üåç –ú–∏—Ä–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏": [
        // –†–æ—Å—Å–∏—è
        {
            name: "–õ–µ–Ω—Ç–∞.—Ä—É",
            url: "https://lenta.ru/rss",
            domain: "lenta.ru",
            description: "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –†–æ—Å—Å–∏–∏ –∏ –º–∏—Ä–∞",
            country: "üá∑üá∫ –†–æ—Å—Å–∏—è",
            language: "ru",
            quality: 9
        },
        {
            name: "–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏",
            url: "https://ria.ru/export/rss2/archive/index.xml",
            domain: "ria.ru",
            description: "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç –†–ò–ê",
            country: "üá∑üá∫ –†–æ—Å—Å–∏—è",
            language: "ru",
            quality: 8
        },
        {
            name: "–ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç—ä",
            url: "https://www.kommersant.ru/RSS/main.xml",
            domain: "kommersant.ru",
            description: "–î–µ–ª–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
            country: "üá∑üá∫ –†–æ—Å—Å–∏—è",
            language: "ru",
            quality: 9
        },
        {
            name: "–ú–µ–¥—É–∑–∞",
            url: "https://meduza.io/rss/all",
            domain: "meduza.io",
            description: "–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–∞",
            country: "üá∑üá∫ –†–æ—Å—Å–∏—è",
            language: "ru",
            quality: 9
        },
        // –°–®–ê
        {
            name: "CNN",
            url: "http://rss.cnn.com/rss/edition.rss",
            domain: "cnn.com",
            description: "–ú–∏—Ä–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç CNN",
            country: "üá∫üá∏ –°–®–ê",
            language: "en",
            quality: 9
        },
        {
            name: "BBC News",
            url: "http://feeds.bbci.co.uk/news/rss.xml",
            domain: "bbc.com",
            description: "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ BBC",
            country: "üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è",
            language: "en",
            quality: 10
        },
        {
            name: "Reuters",
            url: "https://feeds.reuters.com/reuters/topNews",
            domain: "reuters.com",
            description: "–ú–∏—Ä–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç Reuters",
            country: "üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è",
            language: "en",
            quality: 10
        },
        {
            name: "The Guardian",
            url: "https://www.theguardian.com/world/rss",
            domain: "theguardian.com",
            description: "–ù–µ–∑–∞–≤–∏—Å–∏–º–∞—è –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–∞",
            country: "üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è",
            language: "en",
            quality: 9
        },
        // –ï–≤—Ä–æ–ø–∞
        {
            name: "Deutsche Welle",
            url: "https://rss.dw.com/rdf/rss-en-all",
            domain: "dw.com",
            description: "–ù–µ–º–µ—Ü–∫–∏–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",
            country: "üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è",
            language: "en",
            quality: 9
        },
        {
            name: "France 24",
            url: "https://www.france24.com/en/rss",
            domain: "france24.com",
            description: "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",
            country: "üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è",
            language: "en",
            quality: 8
        },
        {
            name: "Euronews",
            url: "https://feeds.feedburner.com/euronews/en/home",
            domain: "euronews.com",
            description: "–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏",
            country: "üá™üá∫ –ï–≤—Ä–æ–ø–∞",
            language: "en",
            quality: 8
        },
        // –ê–∑–∏—è
        {
            name: "NHK World",
            url: "https://www3.nhk.or.jp/rss/news/cat0.xml",
            domain: "nhk.or.jp",
            description: "–Ø–ø–æ–Ω—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏",
            country: "üáØüáµ –Ø–ø–æ–Ω–∏—è",
            language: "en",
            quality: 8
        },
        {
            name: "Al Jazeera",
            url: "https://www.aljazeera.com/xml/rss/all.xml",
            domain: "aljazeera.com",
            description: "–ë–ª–∏–∂–Ω–µ–≤–æ—Å—Ç–æ—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",
            country: "üá∂üá¶ –ö–∞—Ç–∞—Ä",
            language: "en",
            quality: 8
        }
    ],
    "üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": [
        // –†—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ
        {
            name: "–•–∞–±—Ä",
            url: "https://habr.com/ru/rss/hub/programming/",
            domain: "habr.com",
            description: "IT-—Å—Ç–∞—Ç—å–∏ –∏ –Ω–æ–≤–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
            country: "üá∑üá∫ –†–æ—Å—Å–∏—è",
            language: "ru",
            quality: 9
        },
        {
            name: "CNews",
            url: "https://www.cnews.ru/inc/rss/news.xml",
            domain: "cnews.ru",
            description: "IT-–Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
            country: "üá∑üá∫ –†–æ—Å—Å–∏—è",
            language: "ru",
            quality: 8
        },
        // –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ
        {
            name: "TechCrunch",
            url: "https://techcrunch.com/feed/",
            domain: "techcrunch.com",
            description: "–°—Ç–∞—Ä—Ç–∞–ø—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏",
            country: "üá∫üá∏ –°–®–ê",
            language: "en",
            quality: 10
        },
        {
            name: "Wired",
            url: "https://www.wired.com/feed/rss",
            domain: "wired.com",
            description: "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –Ω–∞—É–∫–∞, –∫—É–ª—å—Ç—É—Ä–∞",
            country: "üá∫üá∏ –°–®–ê",
            language: "en",
            quality: 9
        },
        {
            name: "Ars Technica",
            url: "https://feeds.arstechnica.com/arstechnica/index",
            domain: "arstechnica.com",
            description: "–ì–ª—É–±–æ–∫–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
            country: "üá∫üá∏ –°–®–ê",
            language: "en",
            quality: 9
        },
        {
            name: "The Verge",
            url: "https://www.theverge.com/rss/index.xml",
            domain: "theverge.com",
            description: "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ —Ü–∏—Ñ—Ä–æ–≤–∞—è –∫—É–ª—å—Ç—É—Ä–∞",
            country: "üá∫üá∏ –°–®–ê",
            language: "en",
            quality: 9
        },
        {
            name: "Engadget",
            url: "https://www.engadget.com/rss.xml",
            domain: "engadget.com",
            description: "–ì–∞–¥–∂–µ—Ç—ã –∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            country: "üá∫üá∏ –°–®–ê",
            language: "en",
            quality: 8
        },
        {
            name: "MIT Technology Review",
            url: "https://www.technologyreview.com/feed/",
            domain: "technologyreview.com",
            description: "–ü–µ—Ä–µ–¥–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –æ—Ç MIT",
            country: "üá∫üá∏ –°–®–ê",
            language: "en",
            quality: 10
        }
    ],
    "üî¨ –ù–∞—É–∫–∞": [
        // –†—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ
        {
            name: "N+1",
            url: "https://nplus1.ru/rss",
            domain: "nplus1.ru",
            description: "–ù–∞—É—á–Ω–æ-–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—Ç–∞—Ç—å–∏",
            country: "üá∑üá∫ –†–æ—Å—Å–∏—è",
            language: "ru",
            quality: 9
        },
        {
            name: "–ü–æ—Å—Ç–ù–∞—É–∫–∞",
            url: "https://postnauka.ru/rss",
            domain: "postnauka.ru",
            description: "–ü–æ–ø—É–ª—è—Ä–Ω–∞—è –Ω–∞—É–∫–∞ –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤",
            country: "üá∑üá∫ –†–æ—Å—Å–∏—è",
            language: "ru",
            quality: 8
        },
        // –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ
        {
            name: "Nature",
            url: "https://www.nature.com/nature.rss",
            domain: "nature.com",
            description: "–í–µ–¥—É—â–∏–π –Ω–∞—É—á–Ω—ã–π –∂—É—Ä–Ω–∞–ª",
            country: "üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è",
            language: "en",
            quality: 10
        },
        {
            name: "Science Magazine",
            url: "https://www.science.org/rss/news_current.xml",
            domain: "science.org",
            description: "–ù–∞—É—á–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–∫—Ä—ã—Ç–∏—è",
            country: "üá∫üá∏ –°–®–ê",
            language: "en",
            quality: 10
        },
        {
            name: "Scientific American",
            url: "https://rss.sciam.com/ScientificAmerican-Global",
            domain: "scientificamerican.com",
            description: "–ü–æ–ø—É–ª—è—Ä–Ω–∞—è –Ω–∞—É–∫–∞",
            country: "üá∫üá∏ –°–®–ê",
            language: "en",
            quality: 9
        },
        {
            name: "New Scientist",
            url: "https://www.newscientist.com/feed/home/",
            domain: "newscientist.com",
            description: "–ù–∞—É—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ—Ç–∫—Ä—ã—Ç–∏—è",
            country: "üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è",
            language: "en",
            quality: 9
        },
        {
            name: "Phys.org",
            url: "https://phys.org/rss-feed/",
            domain: "phys.org",
            description: "–§–∏–∑–∏–∫–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            country: "üá∫üá∏ –°–®–ê",
            language: "en",
            quality: 8
        }
    ],
    "‚öΩ –°–ø–æ—Ä—Ç": [
        // –†–æ—Å—Å–∏—è
        {
            name: "–°–ø–æ—Ä—Ç-–≠–∫—Å–ø—Ä–µ—Å—Å",
            url: "https://www.sport-express.ru/services/materials/rss/",
            domain: "sport-express.ru",
            description: "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –†–æ—Å—Å–∏–∏",
            country: "üá∑üá∫ –†–æ—Å—Å–∏—è",
            language: "ru",
            quality: 8
        },
        {
            name: "–ß–µ–º–ø–∏–æ–Ω–∞—Ç.com",
            url: "https://www.championat.com/rss/news.xml",
            domain: "championat.com",
            description: "–§—É—Ç–±–æ–ª –∏ –¥—Ä—É–≥–∏–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞",
            country: "üá∑üá∫ –†–æ—Å—Å–∏—è",
            language: "ru",
            quality: 8
        },
        // –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ
        {
            name: "ESPN",
            url: "https://www.espn.com/espn/rss/news",
            domain: "espn.com",
            description: "–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π —Å–ø–æ—Ä—Ç",
            country: "üá∫üá∏ –°–®–ê",
            language: "en",
            quality: 9
        },
        {
            name: "BBC Sport",
            url: "http://feeds.bbci.co.uk/sport/rss.xml",
            domain: "bbc.com",
            description: "–ú–∏—Ä–æ–≤–æ–π —Å–ø–æ—Ä—Ç –æ—Ç BBC",
            country: "üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è",
            language: "en",
            quality: 9
        },
        {
            name: "Sky Sports",
            url: "https://www.skysports.com/rss/12040",
            domain: "skysports.com",
            description: "–§—É—Ç–±–æ–ª –∏ —Å–ø–æ—Ä—Ç",
            country: "üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è",
            language: "en",
            quality: 8
        },
        {
            name: "Goal.com",
            url: "https://www.goal.com/feeds/en/news",
            domain: "goal.com",
            description: "–ú–∏—Ä–æ–≤–æ–π —Ñ—É—Ç–±–æ–ª",
            country: "üåç –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π",
            language: "en",
            quality: 8
        }
    ],
    "üé¨ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": [
        // –†—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ
        {
            name: "–ö–∏–Ω–æ–ø–æ–∏—Å–∫",
            url: "https://www.kinopoisk.ru/rss/news.xml",
            domain: "kinopoisk.ru",
            description: "–ù–æ–≤–æ—Å—Ç–∏ –∫–∏–Ω–æ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤",
            country: "üá∑üá∫ –†–æ—Å—Å–∏—è",
            language: "ru",
            quality: 8
        },
        {
            name: "–ò–≥—Ä–æ–º–∞–Ω–∏—è",
            url: "https://www.igromania.ru/rss/",
            domain: "igromania.ru",
            description: "–ò–≥—Ä–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–∑–æ—Ä—ã",
            country: "üá∑üá∫ –†–æ—Å—Å–∏—è",
            language: "ru",
            quality: 8
        },
        // –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ
        {
            name: "IGN",
            url: "https://feeds.ign.com/ign/games-all",
            domain: "ign.com",
            description: "–ò–≥—Ä–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–∑–æ—Ä—ã",
            country: "üá∫üá∏ –°–®–ê",
            language: "en",
            quality: 9
        },
        {
            name: "GameSpot",
            url: "https://www.gamespot.com/feeds/mashup/",
            domain: "gamespot.com",
            description: "–í–∏–¥–µ–æ–∏–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
            country: "üá∫üá∏ –°–®–ê",
            language: "en",
            quality: 8
        },
        {
            name: "Entertainment Weekly",
            url: "https://ew.com/feed/",
            domain: "ew.com",
            description: "–ì–æ–ª–ª–∏–≤—É–¥ –∏ –ø–æ–ø-–∫—É–ª—å—Ç—É—Ä–∞",
            country: "üá∫üá∏ –°–®–ê",
            language: "en",
            quality: 8
        },
        {
            name: "Variety",
            url: "https://variety.com/feed/",
            domain: "variety.com",
            description: "–ò–Ω–¥—É—Å—Ç—Ä–∏—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π",
            country: "üá∫üá∏ –°–®–ê",
            language: "en",
            quality: 9
        }
    ],
    "üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞": [
        // –†–æ—Å—Å–∏—è
        {
            name: "–†–ë–ö",
            url: "https://rssexport.rbc.ru/rbcnews/news/20/full.rss",
            domain: "rbc.ru",
            description: "–î–µ–ª–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –†–æ—Å—Å–∏–∏",
            country: "üá∑üá∫ –†–æ—Å—Å–∏—è",
            language: "ru",
            quality: 9
        },
        {
            name: "–í–µ–¥–æ–º–æ—Å—Ç–∏",
            url: "https://www.vedomosti.ru/rss/news",
            domain: "vedomosti.ru",
            description: "–≠–∫–æ–Ω–æ–º–∏–∫–∞ –∏ –±–∏–∑–Ω–µ—Å",
            country: "üá∑üá∫ –†–æ—Å—Å–∏—è",
            language: "ru",
            quality: 9
        },
        // –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ
        {
            name: "Financial Times",
            url: "https://www.ft.com/rss/home",
            domain: "ft.com",
            description: "–ú–∏—Ä–æ–≤—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",
            country: "üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è",
            language: "en",
            quality: 10
        },
        {
            name: "Bloomberg",
            url: "https://feeds.bloomberg.com/markets/news.rss",
            domain: "bloomberg.com",
            description: "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä—ã–Ω–∫–∏",
            country: "üá∫üá∏ –°–®–ê",
            language: "en",
            quality: 10
        },
        {
            name: "Wall Street Journal",
            url: "https://feeds.a.dj.com/rss/RSSWorldNews.xml",
            domain: "wsj.com",
            description: "–î–µ–ª–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –°–®–ê",
            country: "üá∫üá∏ –°–®–ê",
            language: "en",
            quality: 10
        },
        {
            name: "The Economist",
            url: "https://www.economist.com/rss/latest_updates_rss.xml",
            domain: "economist.com",
            description: "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
            country: "üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è",
            language: "en",
            quality: 10
        }
    ],
    "üè• –ó–¥–æ—Ä–æ–≤—å–µ": [
        {
            name: "WebMD",
            url: "https://rssfeeds.webmd.com/rss/rss.aspx?RSSSource=RSS_PUBLIC",
            domain: "webmd.com",
            description: "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–≤–µ—Ç—ã",
            country: "üá∫üá∏ –°–®–ê",
            language: "en",
            quality: 8
        },
        {
            name: "Mayo Clinic",
            url: "https://newsnetwork.mayoclinic.org/feed/",
            domain: "mayoclinic.org",
            description: "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
            country: "üá∫üá∏ –°–®–ê",
            language: "en",
            quality: 9
        },
        {
            name: "Healthline",
            url: "https://www.healthline.com/rss",
            domain: "healthline.com",
            description: "–ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–µ–¥–∏—Ü–∏–Ω–∞",
            country: "üá∫üá∏ –°–®–ê",
            language: "en",
            quality: 8
        }
    ],
    "üå± –≠–∫–æ–ª–æ–≥–∏—è": [
        {
            name: "National Geographic",
            url: "https://feeds.nationalgeographic.com/ng/News/News_Main",
            domain: "nationalgeographic.com",
            description: "–ü—Ä–∏—Ä–æ–¥–∞ –∏ —ç–∫–æ–ª–æ–≥–∏—è",
            country: "üá∫üá∏ –°–®–ê",
            language: "en",
            quality: 9
        },
        {
            name: "Environmental News Network",
            url: "https://www.enn.com/rss",
            domain: "enn.com",
            description: "–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏",
            country: "üá∫üá∏ –°–®–ê",
            language: "en",
            quality: 8
        },
        {
            name: "TreeHugger",
            url: "https://www.treehugger.com/feeds/rss",
            domain: "treehugger.com",
            description: "–£—Å—Ç–æ–π—á–∏–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ",
            country: "üá∫üá∏ –°–®–ê",
            language: "en",
            quality: 8
        }
    ]
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
const defaultRecommendationSettings = {
    enabled: true,
    showOnStartup: true,
    categories: Object.keys(RECOMMENDED_FEEDS),
    maxRecommendations: 8,
    preferredLanguages: ['ru', 'en'],
    preferredCountries: [],
    minQuality: 7,
    showCountryFlags: true,
    groupByCountry: false,
    sortBy: 'quality'
};

let recommendationSettings = {
    ...defaultRecommendationSettings,
    ...JSON.parse(localStorage.getItem("recommendationSettings") || '{}')
};

if (feeds.length === 0) {
    showPlaceholder();
}

// –£–±–∏—Ä–∞–µ–º —Å–¥–≤–∏–≥ –º–µ–Ω—é –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω

const preloader = document.getElementById('preloader');

function togglePreloader(show) {
    preloader.classList.toggle('active', show);
}

function hidePreloader() {
    preloader.classList.remove("active");
}

function updateCategorySelect() {
    categorySelect.innerHTML = `<option value="">${t('all_categories', '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}</option>`;
    categories.forEach((category) => {
        const option = document.createElement("option");
        option.value = category;
        option.textContent = category;
        categorySelect.appendChild(option);
    });
}

function addCategory() {
    const newCategory = prompt(t('enter_category_name', '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:'));
    if (
        newCategory &&
        newCategory.trim() &&
        !categories.includes(newCategory.trim())
    ) {
        categories.push(newCategory.trim());
        localStorage.setItem("categories", JSON.stringify(categories));
        updateCategorySelect();
        showTranslatedNotification('category_added', 'success');
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
function showRecommendations() {
    if (!recommendationSettings.enabled) return;

    const modal = document.getElementById('recommendationsModal');
    if (!modal) {
        createRecommendationsModal();
    }

    updateRecommendationsContent();
    document.getElementById('recommendationsModal').style.display = 'flex';
    setTimeout(() => document.getElementById('recommendationsModal').classList.add('visible'), 10);
}

function createRecommendationsModal() {
    const modal = document.createElement('div');
    modal.id = 'recommendationsModal';
    modal.className = 'share-modal';

    const translation = translations[currentLanguage] || translations['ru'];

    modal.innerHTML = `
        <div class="share-modal-close-overlay">
            <button class="close-btn focus-ring" onclick="closeRecommendationsModal()" aria-label="${translation.close_recommendations || '–ó–∞–∫—Ä—ã—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'}">√ó</button>
        </div>
        <div class="share-modal-content recommendations-content">
            <div class="recommendations-header">
                <h3>üåü ${translation.recommended_rss_feeds || '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ RSS –ª–µ–Ω—Ç—ã'}</h3>
                <p>${translation.recommendations_description || '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º –≤–∞—Å —Ç–µ–º–∞–º'}</p>
            </div>
            <div class="recommendations-filters">
                <button class="filter-btn active" data-category="all">${translation.all_categories || '–í—Å–µ'}</button>
                ${Object.keys(getLocalizedRecommendedFeeds()).map(cat =>
        `<button class="filter-btn" data-category="${cat}">${cat}</button>`
    ).join('')}
            </div>
            <div id="recommendationsContent" class="recommendations-list"></div>
            <div class="recommendations-footer">
                <button class="settings-btn" onclick="showRecommendationSettings()">‚öôÔ∏è ${translation.settings || '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'}</button>
                <button class="stats-btn" onclick="showRecommendationStatsModal()">üìä ${translation.statistics || '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'}</button>
                <button class="export-btn" onclick="showExportModal()">üì§ ${translation.export || '–≠–∫—Å–ø–æ—Ä—Ç'}</button>
                <button class="close-recommendations-btn" onclick="closeRecommendationsModal()">${translation.close || '–ó–∞–∫—Ä—ã—Ç—å'}</button>
            </div>
        </div>
    `;

    document.body.appendChild(modal);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    modal.querySelectorAll('.filter-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            modal.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
            e.target.classList.add('active');
            updateRecommendationsContent(e.target.dataset.category);
        });
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª–∞
    modal.addEventListener('click', (e) => {
        if (e.target === modal) closeRecommendationsModal();
    });
}

function updateRecommendationsContent(filterCategory = 'all') {
    const container = document.getElementById('recommendationsContent');
    if (!container) return;

    const translation = translations[currentLanguage] || translations['ru'];
    const localizedFeeds = getLocalizedRecommendedFeeds();
    let feedsToShow = [];

    if (filterCategory === 'all') {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ª–µ–Ω—Ç—ã
        Object.values(localizedFeeds).forEach(categoryFeeds => {
            feedsToShow.push(...categoryFeeds);
        });
    } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–µ–Ω—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        feedsToShow = localizedFeeds[filterCategory] || [];
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    feedsToShow = feedsToShow.filter(feed => {
        // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        if (feed.quality < recommendationSettings.minQuality) return false;

        // –§–∏–ª—å—Ç—Ä –ø–æ —è–∑—ã–∫–∞–º
        if (recommendationSettings.preferredLanguages.length > 0 &&
            !recommendationSettings.preferredLanguages.includes(feed.language)) return false;

        // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
        if (recommendationSettings.preferredCountries.length > 0 &&
            !recommendationSettings.preferredCountries.includes(feed.country)) return false;

        return true;
    });

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    feedsToShow.sort((a, b) => {
        switch (recommendationSettings.sortBy) {
            case 'quality':
                return b.quality - a.quality;
            case 'name':
                return a.name.localeCompare(b.name);
            case 'country':
                return a.country.localeCompare(b.country);
            default:
                return b.quality - a.quality;
        }
    });

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    feedsToShow = feedsToShow.slice(0, recommendationSettings.maxRecommendations * 2);

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
    if (recommendationSettings.groupByCountry && filterCategory === 'all') {
        const groupedFeeds = {};
        feedsToShow.forEach(feed => {
            if (!groupedFeeds[feed.country]) {
                groupedFeeds[feed.country] = [];
            }
            groupedFeeds[feed.country].push(feed);
        });

        container.innerHTML = Object.entries(groupedFeeds).map(([country, countryFeeds]) => `
            <div class="country-group">
                <h4 class="country-header">${country}</h4>
                <div class="country-feeds">
                    ${countryFeeds.map(feed => createFeedCard(feed, filterCategory)).join('')}
                </div>
            </div>
        `).join('');
    } else {
        container.innerHTML = feedsToShow.map(feed => createFeedCard(feed, filterCategory)).join('');
    }

    if (feedsToShow.length === 0) {
        container.innerHTML = `<div class="no-recommendations">${t('no_recommendations', '–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤')}</div>`;
    }
}

function createFeedCard(feed, filterCategory = 'all') {
    const isAdded = feeds.includes(feed.url);
    const qualityStars = '‚òÖ'.repeat(Math.floor(feed.quality / 2)) + '‚òÜ'.repeat(5 - Math.floor(feed.quality / 2));

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    let categoryToAdd = '–û–±—â–µ–µ';
    if (filterCategory !== 'all') {
        categoryToAdd = filterCategory;
    } else {
        // –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ RECOMMENDED_FEEDS
        Object.entries(RECOMMENDED_FEEDS).forEach(([category, feeds]) => {
            if (feeds.some(f => f.url === feed.url)) {
                categoryToAdd = category;
            }
        });
    }

    return `
        <div class="recommendation-item ${isAdded ? 'added' : ''}" data-quality="${feed.quality}">
            <div class="recommendation-info">
                <div class="recommendation-header">
                    <h4>${feed.name}</h4>
                    <div class="recommendation-badges">
                        ${recommendationSettings.showCountryFlags ? `<span class="country-badge">${feed.country}</span>` : ''}
                        <span class="quality-badge" title="${t('quality', '–ö–∞—á–µ—Å—Ç–≤–æ')}: ${feed.quality}/10">${qualityStars}</span>
                        <span class="language-badge">${feed.language.toUpperCase()}</span>
                    </div>
                </div>
                <p class="recommendation-description">${feed.description}</p>
                <div class="recommendation-meta">
                    <span class="recommendation-domain">${feed.domain}</span>
                    <span class="recommendation-quality">${t('quality', '–ö–∞—á–µ—Å—Ç–≤–æ')}: ${feed.quality}/10</span>
                </div>
            </div>
            <div class="recommendation-actions">
                ${isAdded ?
            `<button class="added-btn" disabled>‚úì ${t('added', '–î–æ–±–∞–≤–ª–µ–Ω–æ')}</button>` :
            `<button class="add-recommendation-btn" onclick="addRecommendedFeed('${feed.url}', '${feed.name}', '${categoryToAdd}')">+ ${t('add_feed', '–î–æ–±–∞–≤–∏—Ç—å')}</button>`
        }
            </div>
        </div>
    `;
}

async function addRecommendedFeed(url, name, category) {
    if (feeds.includes(url)) return;

    try {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!categories.includes(category)) {
            categories.push(category);
            localStorage.setItem("categories", JSON.stringify(categories));
            updateCategorySelect();
        }

        feeds.push(url);
        feedNames[url] = name;
        feedCategories[url] = category;

        localStorage.setItem("rssFeeds", JSON.stringify(feeds));
        localStorage.setItem("feedNames", JSON.stringify(feedNames));
        localStorage.setItem("feedCategories", JSON.stringify(feedCategories));

        updateTabs();
        updateRecommendationsContent(document.querySelector('.filter-btn.active')?.dataset.category);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        showNotification(`–õ–µ–Ω—Ç–∞ "${name}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${category}"`);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π –ª–µ–Ω—Ç—ã:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–µ–Ω—Ç—ã', 'error');
    }
}

function showRecommendationSettings() {
    const settingsModal = document.createElement('div');
    settingsModal.className = 'share-modal';
    const translation = translations[currentLanguage] || translations['ru'];

    settingsModal.innerHTML = `
        <div class="share-modal-close-overlay">
            <button class="close-btn focus-ring" onclick="this.parentElement.parentElement.remove()" aria-label="${t('close_settings', '–ó–∞–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')}">√ó</button>
        </div>
        <div class="share-modal-content settings-content">
            <h3>‚öôÔ∏è ${t('recommendation_settings', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π')}</h3>
            <div class="settings-group">
                <label class="settings-item">
                    <input type="checkbox" id="enableRecommendations" ${recommendationSettings.enabled ? 'checked' : ''}>
                    <span>${t('enable_recommendations', '–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')}</span>
                </label>
                <label class="settings-item">
                    <input type="checkbox" id="showOnStartup" ${recommendationSettings.showOnStartup ? 'checked' : ''}>
                    <span>${t('show_on_startup', '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ')}</span>
                </label>
            </div>
            <div class="settings-group">
                <label>${t('max_recommendations', '–ú–∞–∫—Å–∏–º—É–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π')}:</label>
                <input type="range" id="maxRecommendations" min="3" max="20" value="${recommendationSettings.maxRecommendations}" 
                       oninput="document.getElementById('maxValue').textContent = this.value">
                <span id="maxValue">${recommendationSettings.maxRecommendations}</span>
            </div>
            <div class="settings-group">
                <label>${t('min_quality', '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ')}:</label>
                <input type="range" id="minQuality" min="1" max="10" value="${recommendationSettings.minQuality}" 
                       oninput="document.getElementById('qualityValue').textContent = this.value">
                <span id="qualityValue">${recommendationSettings.minQuality}</span>/10
            </div>
            <div class="settings-group">
                <label>${t('sort_by', '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞')}:</label>
                <select id="sortBy">
                    <option value="quality" ${recommendationSettings.sortBy === 'quality' ? 'selected' : ''}>${t('sort_by_quality', '–ü–æ –∫–∞—á–µ—Å—Ç–≤—É')}</option>
                    <option value="name" ${recommendationSettings.sortBy === 'name' ? 'selected' : ''}>${t('sort_by_name', '–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é')}</option>
                    <option value="country" ${recommendationSettings.sortBy === 'country' ? 'selected' : ''}>${t('sort_by_country', '–ü–æ —Å—Ç—Ä–∞–Ω–µ')}</option>
                </select>
            </div>
            <div class="settings-group">
                <label class="settings-item">
                    <input type="checkbox" id="showCountryFlags" ${recommendationSettings.showCountryFlags ? 'checked' : ''}>
                    <span>${t('show_country_flags', '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–ª–∞–≥–∏ —Å—Ç—Ä–∞–Ω')}</span>
                </label>
                <label class="settings-item">
                    <input type="checkbox" id="groupByCountry" ${recommendationSettings.groupByCountry ? 'checked' : ''}>
                    <span>${t('group_by_country', '–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Å—Ç—Ä–∞–Ω–∞–º')}</span>
                </label>
            </div>
            <div class="settings-group">
                <label>${t('preferred_languages', '–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —è–∑—ã–∫–∏')}:</label>
                <div class="language-checkboxes">
                    <label class="settings-item">
                        <input type="checkbox" class="language-checkbox" value="ru" 
                               ${recommendationSettings.preferredLanguages.includes('ru') ? 'checked' : ''}>
                        <span>üá∑üá∫ ${getLanguageName('ru')}</span>
                    </label>
                    <label class="settings-item">
                        <input type="checkbox" class="language-checkbox" value="en" 
                               ${recommendationSettings.preferredLanguages.includes('en') ? 'checked' : ''}>
                        <span>üá∫üá∏ ${getLanguageName('en')}</span>
                    </label>
                    <label class="settings-item">
                        <input type="checkbox" class="language-checkbox" value="uk" 
                               ${recommendationSettings.preferredLanguages.includes('uk') ? 'checked' : ''}>
                        <span>üá∫üá¶ ${getLanguageName('uk')}</span>
                    </label>
                    <label class="settings-item">
                        <input type="checkbox" class="language-checkbox" value="pl" 
                               ${recommendationSettings.preferredLanguages.includes('pl') ? 'checked' : ''}>
                        <span>üáµüá± ${getLanguageName('pl')}</span>
                    </label>
                </div>
            </div>
            <div class="settings-group">
                <label>${t('categories_for_recommendations', '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π')}:</label>
                <div class="category-checkboxes">
                    ${Object.keys(getLocalizedRecommendedFeeds()).map(cat => `
                        <label class="settings-item">
                            <input type="checkbox" class="category-checkbox" value="${cat}" 
                                   ${recommendationSettings.categories.includes(cat) ? 'checked' : ''}>
                            <span>${cat}</span>
                        </label>
                    `).join('')}
                </div>
            </div>
            <div class="settings-actions">
                <button onclick="saveRecommendationSettings(); this.parentElement.parentElement.parentElement.remove()">
                    ${t('save', '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å')}
                </button>
                <button onclick="resetRecommendationSettings(); this.parentElement.parentElement.parentElement.remove()">
                    ${t('reset', '–°–±—Ä–æ—Å–∏—Ç—å')}
                </button>
            </div>
        </div>
    `;

    document.body.appendChild(settingsModal);
    settingsModal.style.display = 'flex';
    setTimeout(() => settingsModal.classList.add('visible'), 10);
}

function saveRecommendationSettings() {
    recommendationSettings.enabled = document.getElementById('enableRecommendations').checked;
    recommendationSettings.showOnStartup = document.getElementById('showOnStartup').checked;
    recommendationSettings.maxRecommendations = parseInt(document.getElementById('maxRecommendations').value);
    recommendationSettings.minQuality = parseInt(document.getElementById('minQuality').value);
    recommendationSettings.sortBy = document.getElementById('sortBy').value;
    recommendationSettings.showCountryFlags = document.getElementById('showCountryFlags').checked;
    recommendationSettings.groupByCountry = document.getElementById('groupByCountry').checked;

    const selectedCategories = Array.from(document.querySelectorAll('.category-checkbox:checked'))
        .map(cb => cb.value);
    recommendationSettings.categories = selectedCategories;

    const selectedLanguages = Array.from(document.querySelectorAll('.language-checkbox:checked'))
        .map(cb => cb.value);
    recommendationSettings.preferredLanguages = selectedLanguages;

    localStorage.setItem("recommendationSettings", JSON.stringify(recommendationSettings));
    showTranslatedNotification('settings_saved', 'success');

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    updateRecommendationsContent();
}

function resetRecommendationSettings() {
    recommendationSettings = { ...defaultRecommendationSettings };
    localStorage.setItem("recommendationSettings", JSON.stringify(recommendationSettings));
    showTranslatedNotification('settings_reset', 'success');
}

function closeRecommendationsModal() {
    const modal = document.getElementById('recommendationsModal');
    if (modal) {
        modal.classList.remove('visible');
        setTimeout(() => modal.remove(), 300);
    }
}

// –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'success') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;

    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'error' ? '#ff6b6b' : '#51cf66'};
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        z-index: 3000;
        transform: translateX(100%);
        transition: transform 0.3s ease;
        max-width: 300px;
        word-wrap: break-word;
    `;

    document.body.appendChild(notification);

    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 100);

    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => notification.remove(), 300);
    }, 3000);
}

async function addFeed() {
    const url = rssUrlInput.value.trim();
    if (!url || feeds.includes(url)) return;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è URL
    const normalizedUrl = normalizeRSSUrl(url);
    if (!normalizedUrl) {
        alert(t('enter_valid_rss_url', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL RSS –ª–µ–Ω—Ç—ã'));
        return;
    }

    togglePreloader(true);

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ª–µ–Ω—Ç—ã
        const testResponse = await fetch(`https://api.allorigins.win/raw?url=${encodeURIComponent(normalizedUrl)}`);
        if (!testResponse.ok) {
            throw new Error('–õ–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }

        const xmlText = await testResponse.text();
        const items = parseRSSFeed(xmlText);

        if (items.length === 0) {
            throw new Error('–õ–µ–Ω—Ç–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–Ω—Ç—ã –∏–∑ XML
        const parser = new DOMParser();
        const xmlDoc = parser.parseFromString(xmlText, 'text/xml');
        const feedTitle = xmlDoc.querySelector('channel > title, feed > title')?.textContent?.trim()
            || normalizedUrl.split("/")[2]
            || `–õ–µ–Ω—Ç–∞ ${feeds.length + 1}`;

        feeds.push(normalizedUrl);
        feedNames[normalizedUrl] = feedTitle;
        feedCategories[normalizedUrl] = categorySelect.value || "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏";

        // –ö—ç—à–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        feedCache.set(normalizedUrl, {
            items: items,
            timestamp: Date.now()
        });

        localStorage.setItem("rssFeeds", JSON.stringify(feeds));
        localStorage.setItem("feedNames", JSON.stringify(feedNames));
        localStorage.setItem("feedCategories", JSON.stringify(feedCategories));

        updateTabs();
        switchFeed(feeds.length - 1);
        rssUrlInput.value = "";

        console.log(`–î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–µ–Ω—Ç–∞: ${feedTitle} (${items.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)`);

    } catch (error) {
        alert(t('feed_add_error', '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–µ–Ω—Ç—ã') + `: ${error.message}`);
        console.error('Add feed error:', error);
    } finally {
        togglePreloader(false);
    }
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è RSS URL
function normalizeRSSUrl(url) {
    try {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if (!url.startsWith('http://') && !url.startsWith('https://')) {
            url = 'https://' + url;
        }

        const urlObj = new URL(url);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ RSS –ø—É—Ç–∏
        const commonRSSPaths = [
            '/rss',
            '/rss.xml',
            '/feed',
            '/feed.xml',
            '/feeds/all.atom.xml',
            '/atom.xml',
            '/index.xml'
        ];

        // –ï—Å–ª–∏ URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —è–≤–Ω–æ–≥–æ RSS –ø—É—Ç–∏, –ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å
        if (!url.includes('rss') && !url.includes('feed') && !url.includes('atom') && !url.includes('.xml')) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π URL, –Ω–æ –ø–æ–∑–∂–µ –º–æ–∂–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            return url;
        }

        return url;
    } catch (e) {
        return null;
    }
}

// –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ RSS –ª–µ–Ω—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ
async function discoverRSSFeeds(baseUrl) {
    try {
        const response = await fetch(`https://api.allorigins.win/get?url=${encodeURIComponent(baseUrl)}`);
        const data = await response.json();
        const html = data.contents;

        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');

        // –ò—â–µ–º RSS —Å—Å—ã–ª–∫–∏ –≤ HTML
        const rssLinks = [];
        const linkElements = doc.querySelectorAll('link[type*="rss"], link[type*="atom"], link[href*="rss"], link[href*="feed"]');

        linkElements.forEach(link => {
            const href = link.getAttribute('href');
            if (href) {
                const absoluteUrl = new URL(href, baseUrl).href;
                rssLinks.push({
                    url: absoluteUrl,
                    title: link.getAttribute('title') || 'RSS Feed'
                });
            }
        });

        return rssLinks;
    } catch (error) {
        console.warn('RSS discovery failed:', error);
        return [];
    }
}

function updateTabs() {
    tabs.innerHTML = "";
    const filteredFeeds = feeds.filter(
        (feed) =>
            categorySelect.value === "" ||
            feedCategories[feed] === categorySelect.value
    );

    filteredFeeds.forEach((feed, index) => {
        const tab = document.createElement("button");
        tab.className = `tab focus-ring ${index === currentFeedIndex ? "active" : ""}`;
        tab.setAttribute('role', 'tab');
        tab.setAttribute('aria-selected', index === currentFeedIndex ? 'true' : 'false');
        tab.setAttribute('aria-label', `RSS –ª–µ–Ω—Ç–∞: ${feedNames[feed]}`);
        tab.setAttribute('tabindex', index === currentFeedIndex ? '0' : '-1');

        tab.innerHTML = `
            <span class="tab-name">${feedNames[feed]}</span>
            <button class="edit-icon focus-ring" onclick="editFeedName(event, '${feed}')" aria-label="${t('edit_feed_name', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–Ω—Ç—ã')}" tabindex="-1">‚úèÔ∏è</button>
        `;

        tab.onclick = (e) => {
            if (!e.target.classList.contains("edit-icon")) {
                // –û–±–Ω–æ–≤–ª—è–µ–º ARIA –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
                document.querySelectorAll('.tab').forEach((t, i) => {
                    t.setAttribute('aria-selected', i === index ? 'true' : 'false');
                    t.setAttribute('tabindex', i === index ? '0' : '-1');
                });
                switchFeed(index);
            }
        };

        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        tab.onkeydown = (e) => {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                tab.click();
            }
        };

        tabs.appendChild(tab);
    });

    const manageButton = document.createElement("button");
    manageButton.className = "manage-icon focus-ring";
    manageButton.textContent = "‚öôÔ∏è";
    manageButton.setAttribute('aria-label', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–µ–Ω—Ç–∞–º–∏');
    manageButton.onclick = showFeedManageModal;
    tabs.appendChild(manageButton);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
    setTimeout(updateScrollButtons, 100);
}

function editFeedName(event, feedUrl) {
    event.stopPropagation();
    const newName = prompt(t('enter_new_feed_name', '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–Ω—Ç—ã') + ":", feedNames[feedUrl]);
    if (newName && newName.trim()) {
        feedNames[feedUrl] = newName.trim();
        localStorage.setItem("feedNames", JSON.stringify(feedNames));
        updateTabs();
    }
}

function switchFeed(index) {
    currentFeedIndex = index;
    updateTabs();
    loadCurrentFeed();
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ RSS
async function loadFeed(url, useCache = true) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (useCache && feedCache.has(url)) {
        const cached = feedCache.get(url);
        if (Date.now() - cached.timestamp < CACHE_DURATION) {
            displayFeedItems(cached.items);
            return;
        }
    }

    togglePreloader(true);
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        const proxies = [
            `https://api.allorigins.win/raw?url=${encodeURIComponent(url)}`,
            `https://cors-anywhere.herokuapp.com/${url}`,
            `https://api.codetabs.com/v1/proxy?quest=${encodeURIComponent(url)}`
        ];

        let response;
        let xmlText;

        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
        for (const proxy of proxies) {
            try {
                response = await fetch(proxy, {
                    headers: {
                        'User-Agent': 'Mozilla/5.0 (compatible; RSS Reader)'
                    }
                });
                if (response.ok) {
                    xmlText = await response.text();
                    break;
                }
            } catch (e) {
                continue;
            }
        }

        if (!xmlText) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–µ–Ω—Ç—É');
        }

        const items = parseRSSFeed(xmlText);

        // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        feedCache.set(url, {
            items: items,
            timestamp: Date.now()
        });

        displayFeedItems(items);

    } catch (error) {
        feedGrid.innerHTML = `<p>${t('feed_load_error', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ RSS-–ª–µ–Ω—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')}</p>`;
        console.error('Feed loading error:', error);
    } finally {
        togglePreloader(false);
    }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ RSS –∏ Atom
function parseRSSFeed(xmlText) {
    const parser = new DOMParser();
    const xmlDoc = parser.parseFromString(xmlText, 'text/xml');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
    const parserError = xmlDoc.querySelector('parsererror');
    if (parserError) {
        throw new Error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML');
    }

    let items = [];

    // RSS 2.0 –∏ RSS 1.0
    let rssItems = xmlDoc.querySelectorAll('item');
    if (rssItems.length > 0) {
        items = Array.from(rssItems).map(item => parseRSSItem(item));
    }

    // Atom
    let atomEntries = xmlDoc.querySelectorAll('entry');
    if (atomEntries.length > 0) {
        items = Array.from(atomEntries).map(entry => parseAtomEntry(entry));
    }

    return items;
}

// –ü–∞—Ä—Å–µ—Ä –¥–ª—è RSS —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function parseRSSItem(item) {
    const getTextContent = (selector) => {
        const element = item.querySelector(selector);
        return element ? element.textContent.trim() : '';
    };

    const getAttributeValue = (selector, attribute) => {
        const element = item.querySelector(selector);
        return element ? element.getAttribute(attribute) : '';
    };

    const title = getTextContent('title') || t('no_title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞');
    const description = getTextContent('description') || getTextContent('summary') || '';

    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    let content = getTextContent('content\\:encoded') ||
        getTextContent('content') ||
        getTextContent('fulltext') ||
        getTextContent('body') ||
        description;

    // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π
    if (content.length < 100) {
        const additionalContent = getTextContent('excerpt') ||
            getTextContent('summary') ||
            getTextContent('abstract');
        if (additionalContent && additionalContent.length > content.length) {
            content = additionalContent;
        }
    }

    const link = getTextContent('link') || getTextContent('guid');
    const pubDate = getTextContent('pubDate') || getTextContent('dc\\:date') || getTextContent('published');
    const author = getTextContent('author') || getTextContent('dc\\:creator') || getTextContent('creator');

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = Array.from(item.querySelectorAll('category')).map(cat => cat.textContent.trim());

    // –ú–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç
    const enclosure = getAttributeValue('enclosure', 'url');
    const mediaType = getAttributeValue('enclosure', 'type');
    const mediaThumbnail = getAttributeValue('media\\:thumbnail', 'url');
    const mediaContent = getAttributeValue('media\\:content', 'url');

    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    let imageUrl = enclosure || mediaThumbnail || mediaContent;
    if (!imageUrl && content) {
        const imgMatch = content.match(/<img[^>]+src="([^"]+)"/i);
        if (imgMatch) imageUrl = imgMatch[1];
    }

    return {
        title,
        description: stripHtml(description),
        content: content,
        link,
        pubDate,
        author,
        categories,
        enclosure: imageUrl,
        mediaType: mediaType || (imageUrl ? 'image' : ''),
        isVideo: mediaType && mediaType.includes('video')
    };
}

// –ü–∞—Ä—Å–µ—Ä –¥–ª—è Atom —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function parseAtomEntry(entry) {
    const getTextContent = (selector) => {
        const element = entry.querySelector(selector);
        return element ? element.textContent.trim() : '';
    };

    const getAttributeValue = (selector, attribute) => {
        const element = entry.querySelector(selector);
        return element ? element.getAttribute(attribute) : '';
    };

    const title = getTextContent('title') || t('no_title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞');
    const summary = getTextContent('summary') || '';
    let content = getTextContent('content') || summary;

    // –î–ª—è Atom –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if (content.length < 100) {
        const additionalContent = getTextContent('summary') || getTextContent('subtitle');
        if (additionalContent && additionalContent.length > content.length) {
            content = additionalContent;
        }
    }

    const link = getAttributeValue('link[rel="alternate"]', 'href') || getAttributeValue('link', 'href');
    const pubDate = getTextContent('published') || getTextContent('updated');
    const author = getTextContent('author name');

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ Atom
    const categories = Array.from(entry.querySelectorAll('category')).map(cat =>
        cat.getAttribute('term') || cat.textContent.trim()
    ).filter(Boolean);

    // –ú–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –≤ Atom
    let imageUrl = getAttributeValue('link[rel="enclosure"]', 'href');
    if (!imageUrl && content) {
        const imgMatch = content.match(/<img[^>]+src="([^"]+)"/i);
        if (imgMatch) imageUrl = imgMatch[1];
    }

    return {
        title,
        description: stripHtml(summary),
        content: content,
        link,
        pubDate,
        author,
        categories,
        enclosure: imageUrl,
        mediaType: imageUrl ? 'image' : '',
        isVideo: false
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ª–µ–Ω—Ç—ã
function displayFeedItems(items) {
    feedGrid.innerHTML = '';

    if (items.length === 0) {
        feedGrid.innerHTML = `<p>${t('no_articles', '–ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —ç—Ç–æ–π –ª–µ–Ω—Ç–µ')}</p>`;
        return;
    }

    // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —á–∞—Å—Ç—è–º
    const batchSize = 5;
    let currentBatch = 0;

    function renderBatch() {
        const start = currentBatch * batchSize;
        const end = Math.min(start + batchSize, items.length);

        for (let i = start; i < end; i++) {
            const item = items[i];
            const feedItem = createFeedItemElement(item, i - start);
            feedGrid.appendChild(feedItem);
        }

        currentBatch++;

        // –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–∞—Ä—Ç–∏—é
        if (end < items.length) {
            setTimeout(renderBatch, 100);
        }
    }

    renderBatch();
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ª–µ–Ω—Ç—ã
function createFeedItemElement(item, index) {
    const feedItem = document.createElement('div');
    feedItem.className = 'feed-item';
    feedItem.setAttribute('tabindex', '0');
    feedItem.setAttribute('role', 'article');
    feedItem.setAttribute('aria-label', `–°—Ç–∞—Ç—å—è: ${item.title}`);

    const imageHtml = item.enclosure && !item.isVideo
        ? `<img src="${item.enclosure}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—å–∏: ${item.title}" loading="lazy" onerror="this.style.display='none'">`
        : '';

    const videoHtml = item.enclosure && item.isVideo
        ? `<video controls src="${item.enclosure}" alt="–í–∏–¥–µ–æ: ${item.title}" preload="metadata"></video>`
        : '';

    const dateHtml = item.pubDate
        ? `<div class="item-date" title="${t('publication_date', '–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏')}" data-date="${item.pubDate}">${formatDate(item.pubDate)}</div>`
        : '';

    const authorHtml = item.author
        ? `<div class="item-author" title="${t('article_author', '–ê–≤—Ç–æ—Ä —Å—Ç–∞—Ç—å–∏')}">${t('author', '–ê–≤—Ç–æ—Ä')}: ${item.author}</div>`
        : '';

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
    const enhancedDescription = enhanceNewsCardContent(item.description, 200);

    feedItem.innerHTML = `
        ${imageHtml}
        ${videoHtml}
        <div class="item-content">
            <h2>${item.title}</h2>
            <p>${enhancedDescription}</p>
            <div class="item-meta">
                ${dateHtml}
                ${authorHtml}
            </div>
        </div>
    `;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    feedItem.onclick = () => showDetails(item);
    feedItem.onkeydown = (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            showDetails(item);
        }
    };

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    feedItem.style.setProperty('--delay', `${index * 0.1}s`);
    setTimeout(() => feedItem.classList.add('visible'), index * 50);

    return feedItem;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function stripHtml(html) {
    const tmp = document.createElement('div');
    tmp.innerHTML = html;
    return tmp.textContent || tmp.innerText || '';
}

function formatDate(dateString, lang = currentLanguage) {
    try {
        const date = new Date(dateString);

        // –õ–æ–∫–∞–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
        const locales = {
            'ru': 'ru-RU',
            'en': 'en-US',
            'uk': 'uk-UA',
            'pl': 'pl-PL',
            'cs': 'cs-CZ',
            'bg': 'bg-BG',
            'sr': 'sr-RS'
        };

        const locale = locales[lang] || 'ru-RU';

        return date.toLocaleDateString(locale, {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    } catch (e) {
        return dateString;
    }
}

function loadCurrentFeed() {
    const filteredFeeds = feeds.filter(
        (feed) =>
            categorySelect.value === "" ||
            feedCategories[feed] === categorySelect.value
    );
    if (filteredFeeds.length > 0 && currentFeedIndex < filteredFeeds.length) {
        loadFeed(filteredFeeds[currentFeedIndex]);

        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö –ª–µ–Ω—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        preloadAdjacentFeeds(filteredFeeds, currentFeedIndex);
    } else if (feeds.length === 0) {
        showPlaceholder();
    } else {
        feedGrid.innerHTML = `<p>${t('no_feeds_in_category', '–ù–µ—Ç –ª–µ–Ω—Ç –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}</p>`;
    }
}

// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö –ª–µ–Ω—Ç
async function preloadAdjacentFeeds(filteredFeeds, currentIndex) {
    const preloadPromises = [];

    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏ —Å–ª–µ–¥—É—é—â—É—é –ª–µ–Ω—Ç—ã
    const indicesToPreload = [currentIndex - 1, currentIndex + 1].filter(
        index => index >= 0 && index < filteredFeeds.length && index !== currentIndex
    );

    for (const index of indicesToPreload) {
        const url = filteredFeeds[index];
        if (!feedCache.has(url) || Date.now() - feedCache.get(url).timestamp > CACHE_DURATION) {
            preloadPromises.push(preloadFeed(url));
        }
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –≤ —Ñ–æ–Ω–µ
    if (preloadPromises.length > 0) {
        Promise.allSettled(preloadPromises).catch(console.error);
    }
}

// –§–æ–Ω–æ–≤–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ª–µ–Ω—Ç—ã
async function preloadFeed(url) {
    try {
        const response = await fetch(`https://api.allorigins.win/raw?url=${encodeURIComponent(url)}`, {
            headers: { 'User-Agent': 'Mozilla/5.0 (compatible; RSS Reader)' }
        });

        if (response.ok) {
            const xmlText = await response.text();
            const items = parseRSSFeed(xmlText);

            feedCache.set(url, {
                items: items,
                timestamp: Date.now()
            });
        }
    } catch (error) {
        console.warn('Preload failed for:', url, error);
    }
}

// –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ª–µ–Ω—Ç (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
async function refreshAllFeeds() {
    if (isLoading) return;

    isLoading = true;
    togglePreloader(true);

    try {
        const refreshPromises = feeds.map(async (url) => {
            try {
                await preloadFeed(url);
                return { url, success: true };
            } catch (error) {
                return { url, success: false, error };
            }
        });

        const results = await Promise.allSettled(refreshPromises);
        const successCount = results.filter(r => r.status === 'fulfilled' && r.value.success).length;

        console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–æ ${successCount} –∏–∑ ${feeds.length} –ª–µ–Ω—Ç`);

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –ª–µ–Ω—Ç—É
        loadCurrentFeed();

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    } finally {
        isLoading = false;
        togglePreloader(false);
    }
}

function showPlaceholder() {
    feedGrid.innerHTML = `
        <div class="placeholder">
            <svg width="400" height="400" viewBox="0 0 400 400" fill="none" xmlns="http://www.w3.org/2000/svg">
            <g clip-path="url(#clip0_17_56)">
                <mask id="mask0_17_56" style="mask-type:luminance" maskUnits="userSpaceOnUse" x="0" y="0" width="400"
                    height="400">
                    <path d="M400 0H0V400H400V0Z" fill="white" />
                </mask>
                <g mask="url(#mask0_17_56)">
                    <g filter="url(#filter0_d_17_56)">
                        <path
                            d="M345 50H75C72.2386 50 70 52.2386 70 55V325C70 327.761 72.2386 330 75 330H345C347.761 330 350 327.761 350 325V55C350 52.2386 347.761 50 345 50Z"
                            fill="url(#paint0_radial_17_56)" />
                    </g>
                    <g filter="url(#filter1_d_17_56)">
                        <path
                            d="M280 115H65C62.2386 115 60 117.239 60 120V335C60 337.761 62.2386 340 65 340H280C282.761 340 285 337.761 285 335V120C285 117.239 282.761 115 280 115Z"
                            fill="url(#paint1_radial_17_56)" />
                    </g>
                    <g filter="url(#filter2_d_17_56)">
                        <path
                            d="M215 180H55C52.2386 180 50 182.239 50 185V345C50 347.761 52.2386 350 55 350H215C217.761 350 220 347.761 220 345V185C220 182.239 217.761 180 215 180Z"
                            fill="url(#paint2_radial_17_56)" />
                    </g>
                    <g filter="url(#filter3_d_17_56)">
                        <path
                            d="M100.102 314V209.273H169.443V227.528H122.244V252.483H164.841V270.739H122.244V314H100.102Z"
                            fill="white" />
                    </g>
                </g>
            </g>
            <defs>
                <filter id="filter0_d_17_56" x="45" y="25" width="330" height="330" filterUnits="userSpaceOnUse"
                    color-interpolation-filters="sRGB">
                    <feFlood flood-opacity="0" result="BackgroundImageFix" />
                    <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
                        result="hardAlpha" />
                    <feOffset />
                    <feGaussianBlur stdDeviation="12.5" />
                    <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.2 0" />
                    <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_17_56" />
                    <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_17_56" result="shape" />
                </filter>
                <filter id="filter1_d_17_56" x="35" y="90" width="275" height="275" filterUnits="userSpaceOnUse"
                    color-interpolation-filters="sRGB">
                    <feFlood flood-opacity="0" result="BackgroundImageFix" />
                    <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
                        result="hardAlpha" />
                    <feOffset />
                    <feGaussianBlur stdDeviation="12.5" />
                    <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.2 0" />
                    <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_17_56" />
                    <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_17_56" result="shape" />
                </filter>
                <filter id="filter2_d_17_56" x="25" y="155" width="220" height="220" filterUnits="userSpaceOnUse"
                    color-interpolation-filters="sRGB">
                    <feFlood flood-opacity="0" result="BackgroundImageFix" />
                    <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
                        result="hardAlpha" />
                    <feOffset />
                    <feGaussianBlur stdDeviation="12.5" />
                    <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.2 0" />
                    <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_17_56" />
                    <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_17_56" result="shape" />
                </filter>
                <filter id="filter3_d_17_56" x="90.1023" y="202.273" width="89.3409" height="124.727"
                    filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                    <feFlood flood-opacity="0" result="BackgroundImageFix" />
                    <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
                        result="hardAlpha" />
                    <feOffset dy="3" />
                    <feGaussianBlur stdDeviation="5" />
                    <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.161 0" />
                    <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_17_56" />
                    <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_17_56" result="shape" />
                </filter>
                <radialGradient id="paint0_radial_17_56" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse"
                    gradientTransform="translate(181.857 171.911) rotate(-45.2431) scale(401.463 231.962)">
                    <stop stop-color="#179C5A" />
                    <stop offset="1" stop-color="#137745" />
                </radialGradient>
                <radialGradient id="paint1_radial_17_56" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse"
                    gradientTransform="translate(147.546 210.765) rotate(-45.4052) scale(321.26 177.216)">
                    <stop stop-color="#2A9761" />
                    <stop offset="1" stop-color="#179C5A" />
                </radialGradient>
                <radialGradient id="paint2_radial_17_56" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse"
                    gradientTransform="translate(168.616 326.044) rotate(-46.9051) scale(199.009 190.559)">
                    <stop stop-color="#179C5A" />
                    <stop offset="1" stop-color="#33D183" />
                </radialGradient>
                <clipPath id="clip0_17_56">
                    <rect width="400" height="400" fill="white" />
                </clipPath>
            </defs>
        </svg>
            <h2>Fluent RSS Reader</h2>
            <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Fluent RSS Reader ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π! –î–æ–±–∞–≤–ª—è–π—Ç–µ RSS-–ª–µ–Ω—Ç—ã, —Å–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∏—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —É–¥–æ–±–Ω—ã–º —á—Ç–µ–Ω–∏–µ–º. –ú—ã —Å–æ–∑–¥–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –ª–µ–≥–∫–æ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ª—é–±–∏–º—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.</p>
        </div>
    `;
}

if (feeds.length === 0) {
    showPlaceholder();
}

function showDetails(item) {
    currentItem = item;
    currentMode = "normal";
    updateModalContent();
    modal.style.display = "flex";
    setTimeout(() => modal.classList.add("visible"), 10);
    updateModeButtons();
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è updateModalContent
function updateModalContent() {
    if (currentMode === 'normal') {
        const image = currentItem.enclosure && !currentItem.isVideo ? currentItem.enclosure : '';
        const video = currentItem.enclosure && currentItem.isVideo ? currentItem.enclosure : '';

        const dateHtml = currentItem.pubDate
            ? `<div class="modal-date" title="${t('publication_date', '–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏')}">üìÖ ${formatDate(currentItem.pubDate)}</div>`
            : '';

        const authorHtml = currentItem.author
            ? `<div class="modal-author" title="${t('article_author', '–ê–≤—Ç–æ—Ä —Å—Ç–∞—Ç—å–∏')}">‚úçÔ∏è ${currentItem.author}</div>`
            : '';

        modalContent.innerHTML = `
            ${image ? `<img src="${image}" alt="Preview" loading="lazy">` : ''}
            ${video ? `<video controls src="${video}" alt="Video" preload="metadata"></video>` : ''}
            <div class="modal-header">
                <h1>${currentItem.title}</h1>
                <div class="modal-meta">
                    ${dateHtml}
                    ${authorHtml}
                </div>
            </div>
            <div class="modal-content-text">
                ${currentItem.content || currentItem.description}
            </div>
            <div class="modal-actions">
                <a href="${currentItem.link}" target="_blank" class="source-link">üîó ${t('go_to_source', '–ü–µ—Ä–µ–π—Ç–∏ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É')}</a>
            </div>
        `;
    } else if (currentMode === 'web') {
        togglePreloader(true);
        modalContent.innerHTML = `
            <div class="iframe-container">
                <iframe src="${currentItem.link}" 
                        sandbox="allow-same-origin allow-scripts allow-forms allow-popups" 
                        onload="togglePreloader(false)"
                        onerror="handleIframeError()"></iframe>
            </div>
        `;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ iframe
function handleIframeError() {
    togglePreloader(false);
    modalContent.innerHTML = `
        <div class="iframe-error">
            <h3>‚ö†Ô∏è ${t('page_load_error', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É')}</h3>
            <p>${t('embedding_not_allowed', '–°–∞–π—Ç –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.')}</p>
            <a href="${currentItem.link}" target="_blank" class="source-link">üîó ${t('open_in_new_tab', '–û—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ')}</a>
        </div>
    `;
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ª–æ–∞–¥–µ—Ä–æ–º –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
function showWebPreloader() {
    const webPreloader = document.getElementById("webPreloader");
    if (webPreloader) webPreloader.classList.add("active");
}

function hideWebPreloader() {
    const webPreloader = document.getElementById("webPreloader");
    if (webPreloader) webPreloader.classList.remove("active");
}

function switchMode(mode) {
    currentMode = mode;
    updateModalContent();
    updateModeButtons();
}

function updateModeButtons() {
    const buttons = document.querySelectorAll(".mode-btn");
    buttons.forEach((btn) => {
        btn.classList.toggle(
            "active",
            btn.textContent.toLowerCase() === currentMode
        );
    });
}

function showShareModal() {
    const link = currentItem.link;
    const title = currentItem.title;
    const description = currentItem.description || '';

    linkPreview.textContent = link;

    // –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    shareOptions.innerHTML = `
        <div class="share-section">
            <h4 class="share-section-title">–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã</h4>
            <div class="share-grid">
                <div class="share-option messenger" onclick="shareTo('whatsapp', '${link}')" title="WhatsApp">
                    <span class="share-icon">üí¨</span>
                    <span class="share-name">WhatsApp</span>
                </div>
                <div class="share-option messenger" onclick="shareTo('telegram', '${link}')" title="Telegram">
                    <span class="share-icon">‚úàÔ∏è</span>
                    <span class="share-name">Telegram</span>
                </div>
                <div class="share-option messenger" onclick="shareTo('viber', '${link}')" title="Viber">
                    <span class="share-icon">üìû</span>
                    <span class="share-name">Viber</span>
                </div>
            </div>
        </div>
        
        <div class="share-section">
            <h4 class="share-section-title">–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏</h4>
            <div class="share-grid">
                <div class="share-option social" onclick="shareTo('vk', '${link}')" title="–í–ö–æ–Ω—Ç–∞–∫—Ç–µ">
                    <span class="share-icon">üåê</span>
                    <span class="share-name">–í–ö–æ–Ω—Ç–∞–∫—Ç–µ</span>
                </div>
                <div class="share-option social" onclick="shareTo('ok', '${link}')" title="–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏">
                    <span class="share-icon">üë•</span>
                    <span class="share-name">–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏</span>
                </div>
                <div class="share-option social" onclick="shareTo('facebook', '${link}')" title="Facebook">
                    <span class="share-icon">üìò</span>
                    <span class="share-name">Facebook</span>
                </div>
                <div class="share-option social" onclick="shareTo('x', '${link}')" title="X (Twitter)">
                    <span class="share-icon">üê¶</span>
                    <span class="share-name">X</span>
                </div>
                <div class="share-option social" onclick="shareTo('linkedin', '${link}')" title="LinkedIn">
                    <span class="share-icon">üíº</span>
                    <span class="share-name">LinkedIn</span>
                </div>
                <div class="share-option social" onclick="shareTo('reddit', '${link}')" title="Reddit">
                    <span class="share-icon">ü§ñ</span>
                    <span class="share-name">Reddit</span>
                </div>
            </div>
        </div>
        
        <div class="share-section">
            <h4 class="share-section-title">–î—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã</h4>
            <div class="share-grid">
                <div class="share-option other" onclick="shareTo('email', '${link}')" title="Email">
                    <span class="share-icon">üìß</span>
                    <span class="share-name">Email</span>
                </div>
                <div class="share-option other" onclick="shareTo('sms', '${link}')" title="SMS">
                    <span class="share-icon">üì±</span>
                    <span class="share-name">SMS</span>
                </div>
                <div class="share-option other" onclick="copyLink()" title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É">
                    <span class="share-icon">üìã</span>
                    <span class="share-name">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</span>
                </div>
                <div class="share-option other" onclick="shareNative()" title="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É" id="nativeShare" style="display: none;">
                    <span class="share-icon">üì§</span>
                    <span class="share-name">–ü–æ–¥–µ–ª–∏—Ç—å—Å—è</span>
                </div>
            </div>
        </div>
    `;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    if (navigator.share) {
        document.getElementById('nativeShare').style.display = 'flex';
    }

    shareModal.style.display = "flex";
    setTimeout(() => shareModal.classList.add("visible"), 10);
}

function shareTo(platform, link) {
    const title = currentItem.title;
    const description = currentItem.description || '';
    let shareUrl;

    switch (platform) {
        // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
        case "vk":
            shareUrl = `https://vk.com/share.php?url=${encodeURIComponent(link)}&title=${encodeURIComponent(title)}&description=${encodeURIComponent(description)}`;
            break;
        case "ok":
            shareUrl = `https://connect.ok.ru/offer?url=${encodeURIComponent(link)}&title=${encodeURIComponent(title)}&description=${encodeURIComponent(description)}`;
            break;
        case "facebook":
            shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(link)}&quote=${encodeURIComponent(title)}`;
            break;
        case "x":
            shareUrl = `https://twitter.com/intent/tweet?url=${encodeURIComponent(link)}&text=${encodeURIComponent(title)}&hashtags=news`;
            break;
        case "linkedin":
            shareUrl = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(link)}&title=${encodeURIComponent(title)}&summary=${encodeURIComponent(description)}`;
            break;
        case "reddit":
            shareUrl = `https://reddit.com/submit?url=${encodeURIComponent(link)}&title=${encodeURIComponent(title)}`;
            break;

        // –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã
        case "whatsapp":
            shareUrl = `https://wa.me/?text=${encodeURIComponent(title + '\n\n' + link)}`;
            break;
        case "telegram":
            shareUrl = `https://t.me/share/url?url=${encodeURIComponent(link)}&text=${encodeURIComponent(title)}`;
            break;
        case "viber":
            shareUrl = `viber://forward?text=${encodeURIComponent(title + '\n' + link)}`;
            break;

        // –î—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã
        case "email":
            shareUrl = `mailto:?subject=${encodeURIComponent(title)}&body=${encodeURIComponent(description + '\n\n–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é: ' + link)}`;
            break;
        case "sms":
            shareUrl = `sms:?body=${encodeURIComponent(title + '\n' + link)}`;
            break;
    }

    if (shareUrl) {
        // –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º location.href –≤–º–µ—Å—Ç–æ window.open
        if (platform === 'viber' || platform === 'email' || platform === 'sms') {
            window.location.href = shareUrl;
        } else {
            window.open(shareUrl, "_blank", "width=600,height=400,scrollbars=yes,resizable=yes");
        }
    }

    closeShareModal();
}

function copyLink() {
    const link = currentItem.link;

    if (navigator.clipboard) {
        navigator.clipboard.writeText(link).then(() => {
            showNotification("–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!");
        }).catch(() => {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            fallbackCopyTextToClipboard(link);
        });
    } else {
        fallbackCopyTextToClipboard(link);
    }

    closeShareModal();
}

// Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö
function fallbackCopyTextToClipboard(text) {
    const textArea = document.createElement("textarea");
    textArea.value = text;
    textArea.style.top = "0";
    textArea.style.left = "0";
    textArea.style.position = "fixed";

    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();

    try {
        document.execCommand('copy');
        showNotification("–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!");
    } catch (err) {
        showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", "error");
    }

    document.body.removeChild(textArea);
}

// –ù–∞—Ç–∏–≤–Ω–æ–µ API –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
async function shareNative() {
    if (navigator.share) {
        try {
            await navigator.share({
                title: currentItem.title,
                text: currentItem.description || currentItem.title,
                url: currentItem.link
            });
            closeShareModal();
        } catch (err) {
            if (err.name !== 'AbortError') {
                showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è", "error");
            }
        }
    } else {
        showNotification("–§—É–Ω–∫—Ü–∏—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ", "error");
    }
}

function showFeedManageModal() {
    const filteredFeeds = feeds.filter(
        (feed) =>
            categorySelect.value === "" ||
            feedCategories[feed] === categorySelect.value
    );
    feedManageOptions.innerHTML = filteredFeeds
        .map(
            (feed) => `
        <br>
        <div class="share-option">
            <span>${feedNames[feed]}</span>
            <div>
                <select onchange="changeFeedCategory('${feed}', this.value)">
                    ${categories
                    .map(
                        (cat) => `
                        <option value="${cat}" ${feedCategories[feed] === cat ? "selected" : ""
                            }>${cat}</option>
                    `
                    )
                    .join("")}
                </select>
                <span onclick="deleteFeed('${feed}')" style="margin-left: 10px;">üóëÔ∏è</span>
                <span onclick="shareFeed('${feed}')" style="margin-left: 10px;">üì§</span>
            </div>
        </div>
    `
        )
        .join("");
    feedManageModal.style.display = "flex";
    setTimeout(() => feedManageModal.classList.add("visible"), 10);
}

function changeFeedCategory(feedUrl, newCategory) {
    feedCategories[feedUrl] = newCategory;
    localStorage.setItem("feedCategories", JSON.stringify(feedCategories));
    updateTabs();
    loadCurrentFeed();
}

function deleteFeed(feedUrl) {
    if (confirm(t('confirm_delete_feed', '–£–¥–∞–ª–∏—Ç—å –ª–µ–Ω—Ç—É') + ` "${feedNames[feedUrl]}"?`)) {
        feeds = feeds.filter((f) => f !== feedUrl);
        delete feedNames[feedUrl];
        delete feedCategories[feedUrl];
        localStorage.setItem("rssFeeds", JSON.stringify(feeds));
        localStorage.setItem("feedNames", JSON.stringify(feedNames));
        localStorage.setItem("feedCategories", JSON.stringify(feedCategories));
        if (currentFeedIndex >= feeds.length) currentFeedIndex = 0;
        updateTabs();
        loadCurrentFeed();
        closeFeedManageModal();
    }
}

function shareFeed(feedUrl) {
    const shareLink = `${window.location.origin}${window.location.pathname
        }?feed=${encodeURIComponent(feedUrl)}`;
    navigator.clipboard.writeText(shareLink).then(() => {
        alert(t('feed_link_copied', '–°—Å—ã–ª–∫–∞ –Ω–∞ –ª–µ–Ω—Ç—É —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞! –ü–µ—Ä–µ–¥–∞–π—Ç–µ –µ—ë –¥—Ä—É–≥—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.'));
    });
    closeFeedManageModal();
}

function closeModal() {
    modal.classList.remove("visible");
    setTimeout(() => (modal.style.display = "none"), 300);
}

function closeShareModal() {
    shareModal.classList.remove("visible");
    setTimeout(() => (shareModal.style.display = "none"), 300);
}

function closeFeedManageModal() {
    feedManageModal.classList.remove("visible");
    setTimeout(() => (feedManageModal.style.display = "none"), 300);
}

function clearFeed() {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ª–µ–Ω—Ç—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
        return;
    }

    feeds = [];
    feedNames = {};
    feedCategories = {};
    feedCache.clear();
    localStorage.setItem("rssFeeds", JSON.stringify(feeds));
    localStorage.setItem("feedNames", JSON.stringify(feedNames));
    localStorage.setItem("feedCategories", JSON.stringify(feedCategories));
    feedGrid.innerHTML = "";
    updateTabs();
    showPlaceholder();
}

// –≠–∫—Å–ø–æ—Ä—Ç –ª–µ–Ω—Ç –≤ OPML —Ñ–æ—Ä–º–∞—Ç
function exportFeeds() {
    if (feeds.length === 0) {
        alert('–ù–µ—Ç –ª–µ–Ω—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
        return;
    }

    const opml = generateOPML();
    const blob = new Blob([opml], { type: 'text/xml' });
    const url = URL.createObjectURL(blob);

    const a = document.createElement('a');
    a.href = url;
    a.download = `rss-feeds-${new Date().toISOString().split('T')[0]}.opml`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
}

// –ò–º–ø–æ—Ä—Ç –ª–µ–Ω—Ç –∏–∑ OPML —Ñ–∞–π–ª–∞
function importFeeds() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.opml,.xml';
    input.onchange = handleOPMLImport;
    input.click();
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è OPML
function generateOPML() {
    const now = new Date().toUTCString();
    let opml = `<?xml version="1.0" encoding="UTF-8"?>
<opml version="2.0">
    <head>
        <title>RSS Feeds Export</title>
        <dateCreated>${now}</dateCreated>
        <dateModified>${now}</dateModified>
    </head>
    <body>`;

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categorizedFeeds = {};
    feeds.forEach(feed => {
        const category = feedCategories[feed] || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
        if (!categorizedFeeds[category]) {
            categorizedFeeds[category] = [];
        }
        categorizedFeeds[category].push(feed);
    });

    Object.entries(categorizedFeeds).forEach(([category, categoryFeeds]) => {
        opml += `\n        <outline text="${category}" title="${category}">`;
        categoryFeeds.forEach(feed => {
            const title = feedNames[feed] || feed;
            opml += `\n            <outline type="rss" text="${title}" title="${title}" xmlUrl="${feed}" htmlUrl="${feed}"/>`;
        });
        opml += `\n        </outline>`;
    });

    opml += `\n    </body>
</opml>`;

    return opml;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ OPML
async function handleOPMLImport(event) {
    const file = event.target.files[0];
    if (!file) return;

    try {
        const text = await file.text();
        const parser = new DOMParser();
        const opmlDoc = parser.parseFromString(text, 'text/xml');

        const outlines = opmlDoc.querySelectorAll('outline[xmlUrl]');
        let importedCount = 0;

        for (const outline of outlines) {
            const xmlUrl = outline.getAttribute('xmlUrl');
            const title = outline.getAttribute('text') || outline.getAttribute('title');
            const category = outline.parentElement.getAttribute('text') || '–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ';

            if (xmlUrl && !feeds.includes(xmlUrl)) {
                feeds.push(xmlUrl);
                feedNames[xmlUrl] = title || xmlUrl.split('/')[2] || `–õ–µ–Ω—Ç–∞ ${feeds.length}`;
                feedCategories[xmlUrl] = category;

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                if (!categories.includes(category)) {
                    categories.push(category);
                }

                importedCount++;
            }
        }

        if (importedCount > 0) {
            localStorage.setItem("rssFeeds", JSON.stringify(feeds));
            localStorage.setItem("feedNames", JSON.stringify(feedNames));
            localStorage.setItem("feedCategories", JSON.stringify(feedCategories));
            localStorage.setItem("categories", JSON.stringify(categories));

            updateCategorySelect();
            updateTabs();
            loadCurrentFeed();

            alert(`–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedCount} –ª–µ–Ω—Ç`);
        } else {
            alert('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –ª–µ–Ω—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
        }

    } catch (error) {
        alert('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ OPML —Ñ–∞–π–ª–∞: ' + error.message);
        console.error('OPML import error:', error);
    }
}

function scrollToTop() {
    window.scrollTo({ top: 0, behavior: "smooth" });
}

function toggleTheme() {
    const currentTheme = document.documentElement.getAttribute("data-theme");

    if (!currentTheme) {
        document.documentElement.setAttribute("data-theme", "light");
    } else if (currentTheme === "light") {
        document.documentElement.setAttribute("data-theme", "dark");
    } else {
        document.documentElement.removeAttribute("data-theme");
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∏–∫–æ–Ω–∫–∏ —Ç–µ–º—ã
    updateAllThemeIcons();

    localStorage.setItem(
        "theme",
        document.documentElement.getAttribute("data-theme") || "system"
    );
}

const savedTheme = localStorage.getItem("theme");
if (savedTheme === "light") {
    document.documentElement.setAttribute("data-theme", "light");
    themeIcon.textContent = "‚òÄÔ∏è";
} else if (savedTheme === "dark") {
    document.documentElement.setAttribute("data-theme", "dark");
    themeIcon.textContent = "üåô";
} else {
    themeIcon.textContent = "üåì";
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∏–∫–æ–Ω–æ–∫ —Ç–µ–º—ã
function updateAllThemeIcons() {
    const currentTheme = document.documentElement.getAttribute("data-theme");
    let iconText;

    if (!currentTheme) {
        iconText = "üåì";
    } else if (currentTheme === "light") {
        iconText = "‚òÄÔ∏è";
    } else {
        iconText = "üåô";
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∏–∫–æ–Ω–∫–∏ —Ç–µ–º—ã
    document.querySelectorAll('#themeIcon, .theme-icon').forEach(icon => {
        if (icon) icon.textContent = iconText;
    });
}

rssUrlInput.addEventListener("keypress", (e) => {
    if (e.key === "Enter") addFeed();
});

categorySelect.addEventListener("change", () => {
    currentFeedIndex = 0;
    updateTabs();
    loadCurrentFeed();
});

modal.addEventListener("click", (e) => {
    if (e.target === modal) closeModal();
});

shareModal.addEventListener("click", (e) => {
    if (e.target === shareModal) closeShareModal();
});

feedManageModal.addEventListener("click", (e) => {
    if (e.target === feedManageModal) closeFeedManageModal();
});

const urlParams = new URLSearchParams(window.location.search);
const sharedFeed = urlParams.get("feed");
if (sharedFeed && !feeds.includes(sharedFeed)) {
    feeds.push(sharedFeed);
    feedNames[sharedFeed] = sharedFeed.split("/")[2] || `–õ–µ–Ω—Ç–∞ ${feeds.length}`;
    feedCategories[sharedFeed] = "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏";
    localStorage.setItem("rssFeeds", JSON.stringify(feeds));
    localStorage.setItem("feedNames", JSON.stringify(feedNames));
    localStorage.setItem("feedCategories", JSON.stringify(feedCategories));
    updateTabs();
    switchFeed(0);
}

// –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
function cleanupCache() {
    if (feedCache.size > 50) { // –ú–∞–∫—Å–∏–º—É–º 50 –ª–µ–Ω—Ç –≤ –∫—ç—à–µ
        const entries = Array.from(feedCache.entries());
        entries.sort((a, b) => a[1].timestamp - b[1].timestamp);

        // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        const toDelete = entries.slice(0, 10);
        toDelete.forEach(([url]) => feedCache.delete(url));
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞
function cleanupExpiredCache() {
    const now = Date.now();
    for (const [url, data] of feedCache.entries()) {
        if (now - data.timestamp > CACHE_DURATION * 2) {
            feedCache.delete(url);
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
setInterval(cleanupExpiredCache, 10 * 60 * 1000);

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ª–µ–Ω—Ç
function addRefreshButton() {
    const refreshBtn = document.createElement('button');
    refreshBtn.innerHTML = 'üîÑ';
    refreshBtn.title = t('refresh_all_feeds', '–û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ª–µ–Ω—Ç—ã');
    refreshBtn.className = 'refresh-btn';
    refreshBtn.onclick = refreshAllFeeds;
    refreshBtn.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: var(--accent-color);
        color: white;
        border: none;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        font-size: 20px;
        cursor: pointer;
        z-index: 1000;
        box-shadow: 0 2px 10px rgba(0,0,0,0.2);
        transition: transform 0.2s;
    `;
    refreshBtn.onmouseover = () => refreshBtn.style.transform = 'scale(1.1)';
    refreshBtn.onmouseout = () => refreshBtn.style.transform = 'scale(1)';
    document.body.appendChild(refreshBtn);
}

// Retry –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–µ–Ω—Ç
async function fetchWithRetry(url, options = {}, maxRetries = 3) {
    let lastError;

    for (let i = 0; i < maxRetries; i++) {
        try {
            const response = await fetch(url, {
                ...options,
                timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            });

            if (response.ok) {
                return response;
            }

            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        } catch (error) {
            lastError = error;

            // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            if (i < maxRetries - 1) {
                const delay = Math.pow(2, i) * 1000; // 1s, 2s, 4s
                await new Promise(resolve => setTimeout(resolve, delay));
            }
        }
    }

    throw lastError;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
function checkOnlineStatus() {
    if (!navigator.onLine) {
        feedGrid.innerHTML = `<p>‚ö†Ô∏è ${t('no_internet', '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É')}</p>`;
        return false;
    }
    return true;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–∏
window.addEventListener('online', () => {
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    if (feeds.length > 0) {
        loadCurrentFeed();
    }
});

window.addEventListener('offline', () => {
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ');
    feedGrid.innerHTML = `<p>‚ö†Ô∏è ${t('connection_lost', '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.')}</p>`;
});

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - –¥–µ–±–∞—É–Ω—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function () {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    updateCategorySelect();
    updateTabs();
    loadCurrentFeed();
    addRefreshButton();
    console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
});

// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
if ('serviceWorker' in navigator) {
    navigator.serviceWorker.register('/sw.js').catch(console.error);
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
function toggleMobileMenu() {
    const mobileMenu = document.getElementById('mobileMenu');
    const menuToggle = document.getElementById('menuToggle');
    const isVisible = mobileMenu.classList.contains('visible');

    if (isVisible) {
        mobileMenu.classList.remove('visible');
        menuToggle.setAttribute('aria-expanded', 'false');
        setTimeout(() => {
            mobileMenu.style.display = 'none';
        }, 300);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
        menuToggle.focus();
    } else {
        mobileMenu.style.display = 'flex';
        menuToggle.setAttribute('aria-expanded', 'true');
        setTimeout(() => {
            mobileMenu.classList.add('visible');
            // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ –º–µ–Ω—é
            const firstMenuItem = mobileMenu.querySelector('.mobile-nav-item');
            if (firstMenuItem) firstMenuItem.focus();
        }, 10);
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
document.addEventListener('click', (e) => {
    const mobileMenu = document.getElementById('mobileMenu');
    const menuToggle = document.getElementById('menuToggle');

    if (mobileMenu.classList.contains('visible') &&
        !mobileMenu.contains(e.target) &&
        !menuToggle.contains(e.target)) {
        toggleMobileMenu();
    }
});

// –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
function updateNavigationVisibility() {
    const screenWidth = window.innerWidth;
    const desktopItems = document.querySelectorAll('.nav-item.desktop-only');
    const menuToggle = document.getElementById('menuToggle');

    if (screenWidth <= 768) {
        // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö —Å–∫—Ä—ã–≤–∞–µ–º –¥–µ—Å–∫—Ç–æ–ø–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        desktopItems.forEach(item => {
            item.style.display = 'none';
        });
        menuToggle.style.display = 'flex';
    } else {
        // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        desktopItems.forEach(item => {
            item.style.display = 'flex';
        });
        menuToggle.style.display = 'flex'; // –ú–µ–Ω—é –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º–æ

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
        const mobileMenu = document.getElementById('mobileMenu');
        if (mobileMenu.classList.contains('visible')) {
            toggleMobileMenu();
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    updateNavigationStyles();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function updateNavigationStyles() {
    const bottomNav = document.getElementById('bottomNav');
    const screenWidth = window.innerWidth;

    if (screenWidth <= 480) {
        bottomNav.classList.add('compact');
    } else {
        bottomNav.classList.remove('compact');
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
window.addEventListener('resize', debounce(() => {
    updateNavigationVisibility();
    resetBottomNavStyles(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
}, 250));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function updateActiveNavItem(activeItem) {
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
    if (activeItem) {
        activeItem.classList.add('active');
    }
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
const originalLoadCurrentFeed = loadCurrentFeed;
loadCurrentFeed = function () {
    updateActiveNavItem(document.querySelector('.nav-item[onclick*="loadCurrentFeed"]'));
    return originalLoadCurrentFeed.apply(this, arguments);
};

const originalScrollToTop = scrollToTop;
scrollToTop = function () {
    updateActiveNavItem(document.querySelector('.nav-item[onclick*="scrollToTop"]'));
    setTimeout(() => updateActiveNavItem(null), 1000); // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
    return originalScrollToTop.apply(this, arguments);
};

// –û—Ç–∫–ª—é—á–∞–µ–º —Å–∫—Ä—ã—Ç–∏–µ/–ø–æ–∫–∞–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
// let lastScrollY = window.scrollY;
// let navHideTimeout;

// function handleNavScroll() {
//     const bottomNav = document.getElementById('bottomNav');
//     const currentScrollY = window.scrollY;

//     if (currentScrollY > lastScrollY && currentScrollY > 100) {
//         bottomNav.style.transform = 'translateY(100%)';
//         bottomNav.style.opacity = '0.8';
//     } else {
//         bottomNav.style.transform = 'translateY(0)';
//         bottomNav.style.opacity = '1';
//     }

//     lastScrollY = currentScrollY;

//     clearTimeout(navHideTimeout);
//     navHideTimeout = setTimeout(() => {
//         bottomNav.style.transform = 'translateY(0)';
//         bottomNav.style.opacity = '1';
//     }, 2000);
// }

// window.addEventListener('scroll', debounce(handleNavScroll, 10));

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
document.addEventListener('keydown', (e) => {
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ Escape
    if (e.key === 'Escape') {
        const openModal = document.querySelector('.modal.visible, .share-modal.visible');
        if (openModal) {
            if (openModal.id === 'mobileMenu') {
                toggleMobileMenu();
            } else if (openModal.id === 'modal') {
                closeModal();
            } else if (openModal.id === 'shareModal') {
                closeShareModal();
            } else if (openModal.id === 'feedManageModal') {
                closeFeedManageModal();
            } else if (openModal.id === 'recommendationsModal') {
                closeRecommendationsModal();
            }
        }
    }

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º —Å—Ç—Ä–µ–ª–∫–∞–º–∏
    if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {
        const focusedTab = document.activeElement;
        if (focusedTab && focusedTab.classList.contains('tab')) {
            const tabs = Array.from(document.querySelectorAll('.tab'));
            const currentIndex = tabs.indexOf(focusedTab);
            let nextIndex;

            if (e.key === 'ArrowLeft') {
                nextIndex = currentIndex > 0 ? currentIndex - 1 : tabs.length - 1;
            } else {
                nextIndex = currentIndex < tabs.length - 1 ? currentIndex + 1 : 0;
            }

            tabs[nextIndex].focus();
            e.preventDefault();
        }
    }
});

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–æ–º –≤ –º–æ–±–∏–ª—å–Ω–æ–º –º–µ–Ω—é
document.addEventListener('keydown', (e) => {
    const mobileMenu = document.getElementById('mobileMenu');
    if (!mobileMenu.classList.contains('visible')) return;

    const focusableElements = mobileMenu.querySelectorAll('button, [tabindex="0"]');
    const firstElement = focusableElements[0];
    const lastElement = focusableElements[focusableElements.length - 1];

    if (e.key === 'Tab') {
        if (e.shiftKey) {
            if (document.activeElement === firstElement) {
                lastElement.focus();
                e.preventDefault();
            }
        } else {
            if (document.activeElement === lastElement) {
                firstElement.focus();
                e.preventDefault();
            }
        }
    }
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function scrollTabs(direction) {
    const tabsContainer = document.getElementById('tabs');
    const scrollAmount = 200;

    if (direction === 'left') {
        tabsContainer.scrollBy({
            left: -scrollAmount,
            behavior: 'smooth'
        });
    } else {
        tabsContainer.scrollBy({
            left: scrollAmount,
            behavior: 'smooth'
        });
    }

    updateScrollButtons();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
function updateScrollButtons() {
    const tabsContainer = document.getElementById('tabs');
    const scrollLeft = document.getElementById('scrollLeft');
    const scrollRight = document.getElementById('scrollRight');
    const scrollProgress = document.getElementById('scrollProgress');

    if (!tabsContainer || !scrollLeft || !scrollRight) return;

    const { scrollLeft: currentScroll, scrollWidth, clientWidth } = tabsContainer;
    const maxScroll = scrollWidth - clientWidth;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    scrollLeft.disabled = currentScroll <= 0;
    scrollRight.disabled = currentScroll >= maxScroll;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if (scrollProgress && maxScroll > 0) {
        const progress = (currentScroll / maxScroll) * 100;
        scrollProgress.style.width = `${progress}%`;
    }
}

// –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫–æ–ª–µ—Å–æ–º –º—ã—à–∏
function initTabsScrolling() {
    const tabsContainer = document.getElementById('tabs');
    if (!tabsContainer) return;

    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫–æ–ª–µ—Å–æ–º –º—ã—à–∏
    tabsContainer.addEventListener('wheel', (e) => {
        if (e.deltaY !== 0) {
            e.preventDefault();
            tabsContainer.scrollBy({
                left: e.deltaY > 0 ? 100 : -100,
                behavior: 'smooth'
            });
            updateScrollButtons();
        }
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
    tabsContainer.addEventListener('scroll', updateScrollButtons);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('resize', updateScrollButtons);

    // –ò–Ω–∏—Ü–∏–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    setTimeout(updateScrollButtons, 100);
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –Ω–æ–≤–æ—Å—Ç–∏
function showDetails(item) {
    currentItem = item;
    currentMode = "normal";

    const modal = document.getElementById('modal');
    const modalContent = modal.querySelector('.modal-content');

    // –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modalContent.innerHTML = `
        <div class="modal-header">
            <div class="mode-switch">
                <button class="mode-btn active focus-ring" onclick="switchMode('normal')">–°—Ç–∞—Ç—å—è</button>
                <button class="mode-btn focus-ring" onclick="switchMode('web')">–í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞</button>
            </div>
        </div>
        <div class="modal-body" id="modalBody">
            <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –∑–¥–µ—Å—å -->
        </div>
        <div class="modal-footer">
            <div class="news-actions">
                <a href="${item.link}" target="_blank" class="news-action-btn primary focus-ring">
                    <span>üîó</span>
                    <span>–ß–∏—Ç–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ</span>
                </a>
                <button class="news-action-btn focus-ring" onclick="showShareModal()">
                    <span>üì§</span>
                    <span>–ü–æ–¥–µ–ª–∏—Ç—å—Å—è</span>
                </button>
            </div>
        </div>
    `;

    updateModalContent();
    modal.style.display = "flex";
    setTimeout(() => modal.classList.add("visible"), 10);
    updateModeButtons();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function updateModalContent() {
    const modalBody = document.getElementById('modalBody');
    if (!modalBody || !currentItem) return;

    if (currentMode === 'normal') {
        const imageHtml = currentItem.enclosure && !currentItem.isVideo
            ? `<div class="news-media">
                 <img src="${currentItem.enclosure}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ—Å—Ç–∏" loading="lazy">
               </div>`
            : '';

        const videoHtml = currentItem.enclosure && currentItem.isVideo
            ? `<div class="news-media">
                 <video controls src="${currentItem.enclosure}" preload="metadata"></video>
               </div>`
            : '';

        const dateHtml = currentItem.pubDate
            ? `<div class="news-meta-item">
                 <span class="news-meta-icon">üìÖ</span>
                 <span>${formatDate(currentItem.pubDate)}</span>
               </div>`
            : '';

        const authorHtml = currentItem.author
            ? `<div class="news-meta-item">
                 <span class="news-meta-icon">‚úçÔ∏è</span>
                 <span>${currentItem.author}</span>
               </div>`
            : '';

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞—Ç—å–∏
        const articleContent = processArticleContent(currentItem);

        modalBody.innerHTML = `
            <h1 class="news-title">${currentItem.title}</h1>
            ${(dateHtml || authorHtml) ? `
                <div class="news-meta">
                    ${dateHtml}
                    ${authorHtml}
                </div>
            ` : ''}
            ${imageHtml}
            ${videoHtml}
            <div class="news-content">${articleContent}</div>
        `;
    } else if (currentMode === 'web') {
        togglePreloader(true);
        modalBody.innerHTML = `
            <div class="iframe-container">
                <iframe src="${currentItem.link}" 
                        sandbox="allow-same-origin allow-scripts allow-forms allow-popups" 
                        onload="togglePreloader(false)"
                        onerror="handleIframeError()"></iframe>
            </div>
        `;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
updateNavigationVisibility();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç–∞—Ç—å–∏
function processArticleContent(item) {
    let content = item.content || item.description || '';

    // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!content.trim()) {
        return '<p class="no-content">–¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. <a href="' + item.link + '" target="_blank">–ß–∏—Ç–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞</a></p>';
    }

    // –û—á–∏—â–∞–µ–º –∏ —É–ª—É—á—à–∞–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç
    content = cleanAndEnhanceHTML(content);

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
    if (item.categories && item.categories.length > 0) {
        const categoriesHtml = item.categories.map(cat =>
            `<span class="article-category">${cat}</span>`
        ).join('');
        content = `<div class="article-categories">${categoriesHtml}</div>` + content;
    }

    return content;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞
function cleanAndEnhanceHTML(html) {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTML
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = html;

    // –£–¥–∞–ª—è–µ–º –æ–ø–∞—Å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const dangerousElements = tempDiv.querySelectorAll('script, style, iframe[src*="javascript"], object, embed');
    dangerousElements.forEach(el => el.remove());

    // –£–ª—É—á—à–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const images = tempDiv.querySelectorAll('img');
    images.forEach(img => {
        img.setAttribute('loading', 'lazy');
        img.style.maxWidth = '100%';
        img.style.height = 'auto';
        img.style.borderRadius = 'var(--radius-md)';
        img.style.marginBottom = 'var(--spacing-lg)';

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        img.onerror = function () {
            this.style.display = 'none';
        };

        // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (!img.parentElement.classList.contains('image-container')) {
            const container = document.createElement('div');
            container.className = 'image-container';
            img.parentNode.insertBefore(container, img);
            container.appendChild(img);
        }
    });

    // –£–ª—É—á—à–∞–µ–º —Å—Å—ã–ª–∫–∏
    const links = tempDiv.querySelectorAll('a');
    links.forEach(link => {
        link.setAttribute('target', '_blank');
        link.setAttribute('rel', 'noopener noreferrer');

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫
        if (link.hostname && link.hostname !== window.location.hostname) {
            link.innerHTML += ' <span class="external-link-icon">‚Üó</span>';
        }
    });

    // –£–ª—É—á—à–∞–µ–º —Å–ø–∏—Å–∫–∏
    const lists = tempDiv.querySelectorAll('ul, ol');
    lists.forEach(list => {
        list.style.marginBottom = 'var(--spacing-lg)';
        list.style.paddingLeft = 'var(--spacing-xl)';
    });

    // –£–ª—É—á—à–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
    const paragraphs = tempDiv.querySelectorAll('p');
    paragraphs.forEach(p => {
        if (p.textContent.trim()) {
            p.style.marginBottom = 'var(--spacing-lg)';
            p.style.lineHeight = '1.8';
        } else {
            p.remove(); // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
        }
    });

    // –£–ª—É—á—à–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headings = tempDiv.querySelectorAll('h1, h2, h3, h4, h5, h6');
    headings.forEach(heading => {
        heading.style.marginTop = 'var(--spacing-xl)';
        heading.style.marginBottom = 'var(--spacing-md)';
        heading.style.color = 'var(--text)';
        heading.style.fontWeight = '600';
    });

    // –£–ª—É—á—à–∞–µ–º —Ü–∏—Ç–∞—Ç—ã
    const blockquotes = tempDiv.querySelectorAll('blockquote');
    blockquotes.forEach(quote => {
        quote.className = 'enhanced-quote';
        quote.style.borderLeft = '4px solid var(--accent-color)';
        quote.style.paddingLeft = 'var(--spacing-lg)';
        quote.style.margin = 'var(--spacing-xl) 0';
        quote.style.fontStyle = 'italic';
        quote.style.background = 'var(--surface)';
        quote.style.padding = 'var(--spacing-lg)';
        quote.style.borderRadius = '0 var(--radius-md) var(--radius-md) 0';
    });

    // –£–ª—É—á—à–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    const tables = tempDiv.querySelectorAll('table');
    tables.forEach(table => {
        table.style.width = '100%';
        table.style.borderCollapse = 'collapse';
        table.style.marginBottom = 'var(--spacing-lg)';
        table.style.border = '1px solid var(--border)';
        table.style.borderRadius = 'var(--radius-md)';
        table.style.overflow = 'hidden';

        // –°—Ç–∏–ª–∏–∑—É–µ–º —è—á–µ–π–∫–∏
        const cells = table.querySelectorAll('td, th');
        cells.forEach(cell => {
            cell.style.padding = 'var(--spacing-md)';
            cell.style.borderBottom = '1px solid var(--border)';
            if (cell.tagName === 'TH') {
                cell.style.background = 'var(--surface)';
                cell.style.fontWeight = '600';
            }
        });
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –±–ª–æ–∫–∏
    const codeBlocks = tempDiv.querySelectorAll('pre, code');
    codeBlocks.forEach(code => {
        code.style.background = 'var(--surface)';
        code.style.padding = code.tagName === 'PRE' ? 'var(--spacing-lg)' : 'var(--spacing-xs) var(--spacing-sm)';
        code.style.borderRadius = 'var(--radius-sm)';
        code.style.fontFamily = '"Courier New", monospace';
        code.style.fontSize = '0.9em';
        if (code.tagName === 'PRE') {
            code.style.overflowX = 'auto';
            code.style.marginBottom = 'var(--spacing-lg)';
        }
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
    const videos = tempDiv.querySelectorAll('video');
    videos.forEach(video => {
        video.setAttribute('controls', '');
        video.style.width = '100%';
        video.style.maxHeight = '400px';
        video.style.borderRadius = 'var(--radius-md)';
        video.style.marginBottom = 'var(--spacing-lg)';
    });

    return tempDiv.innerHTML;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ RSS —ç–ª–µ–º–µ–Ω—Ç–∞
function extractAdditionalData(item) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (item.querySelector) {
        const categories = Array.from(item.querySelectorAll('category')).map(cat => cat.textContent);
        if (categories.length > 0) {
            return { categories };
        }
    }
    return {};
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ RSS –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function parseRSSItemEnhanced(item) {
    const basicData = parseRSSItem(item);
    const additionalData = extractAdditionalData(item);

    return { ...basicData, ...additionalData };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
function enhanceNewsCardContent(description, maxLength = 200) {
    if (!description) return '';

    // –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏ –¥–ª—è –ø—Ä–µ–≤—å—é
    const textOnly = description.replace(/<[^>]*>/g, '');

    // –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç
    if (textOnly.length > maxLength) {
        return textOnly.substring(0, maxLength).trim() + '...';
    }

    return textOnly;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
function trackShareUsage(platform) {
    const shareStats = JSON.parse(localStorage.getItem('shareStats')) || {};
    shareStats[platform] = (shareStats[platform] || 0) + 1;
    localStorage.setItem('shareStats', JSON.stringify(shareStats));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
function getPopularPlatforms() {
    const shareStats = JSON.parse(localStorage.getItem('shareStats')) || {};
    return Object.entries(shareStats)
        .sort(([, a], [, b]) => b - a)
        .slice(0, 4)
        .map(([platform]) => platform);
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è shareTo —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º
const originalShareTo = shareTo;
shareTo = function (platform, link) {
    trackShareUsage(platform);
    return originalShareTo.apply(this, arguments);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ã—Å—Ç—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
function createQuickShareButtons() {
    const popularPlatforms = getPopularPlatforms();
    if (popularPlatforms.length === 0) return '';

    const platformNames = {
        'whatsapp': { icon: 'üí¨', name: 'WhatsApp' },
        'telegram': { icon: '‚úàÔ∏è', name: 'Telegram' },
        'vk': { icon: 'üåê', name: '–í–ö' },
        'facebook': { icon: 'üìò', name: 'Facebook' },
        'x': { icon: 'üê¶', name: 'X' },
        'linkedin': { icon: 'üíº', name: 'LinkedIn' }
    };

    return `
        <div class="quick-share-section">
            <h4 class="share-section-title">–ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ</h4>
            <div class="share-grid">
                ${popularPlatforms.map(platform => {
        const info = platformNames[platform];
        if (!info) return '';
        return `
                        <div class="share-option popular" onclick="shareTo('${platform}', '${currentItem.link}')" title="${info.name}">
                            <span class="share-icon">${info.icon}</span>
                            <span class="share-name">${info.name}</span>
                        </div>
                    `;
    }).join('')}
            </div>
        </div>
    `;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
function generateQRCode(text) {
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è QR –∫–æ–¥–∞ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å
    return `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(text)}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è QR –∫–æ–¥–∞ –≤ –æ–∫–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
function addQRCodeToShare() {
    if (!currentItem) return '';

    const qrUrl = generateQRCode(currentItem.link);
    return `
        <div class="qr-code-section">
            <h4 class="share-section-title">QR –∫–æ–¥</h4>
            <div class="qr-code-container">
                <img src="${qrUrl}" alt="QR –∫–æ–¥ –¥–ª—è —Å—Å—ã–ª–∫–∏" class="qr-code-image" loading="lazy">
                <p class="qr-code-text">–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞</p>
            </div>
        </div>
    `;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –ø–æ–∫–∞–∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –æ–ø—Ü–∏–π
function getDeviceSpecificOptions() {
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
    const isAndroid = /Android/.test(navigator.userAgent);

    let deviceOptions = '';

    if (isMobile) {
        deviceOptions += `
            <div class="share-option other" onclick="shareTo('sms', '${currentItem.link}')" title="SMS">
                <span class="share-icon">üì±</span>
                <span class="share-name">SMS</span>
            </div>
        `;
    }

    if (isIOS) {
        deviceOptions += `
            <div class="share-option other" onclick="shareToAirDrop()" title="AirDrop">
                <span class="share-icon">üì°</span>
                <span class="share-name">AirDrop</span>
            </div>
        `;
    }

    return deviceOptions;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è AirDrop (—Ç–æ–ª—å–∫–æ iOS)
function shareToAirDrop() {
    if (navigator.share) {
        shareNative();
    } else {
        showNotification('AirDrop –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –Ω–∞—Ç–∏–≤–Ω–æ–µ API –ø–æ–¥–µ–ª–∏—Ç—å—Å—è', 'error');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤–∫–ª–∞–¥–æ–∫
initTabsScrolling();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function analyzeUserInterests() {
    const userDomains = feeds.map(feed => {
        try {
            return new URL(feed).hostname.replace('www.', '');
        } catch {
            return null;
        }
    }).filter(Boolean);

    const interests = [];

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–º–µ–Ω—ã –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã
    Object.entries(RECOMMENDED_FEEDS).forEach(([category, categoryFeeds]) => {
        const matchingFeeds = categoryFeeds.filter(feed =>
            userDomains.some(domain => domain.includes(feed.domain) || feed.domain.includes(domain))
        );

        if (matchingFeeds.length > 0) {
            interests.push(category);
        }
    });

    return interests;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
function getPersonalizedRecommendations() {
    const userInterests = analyzeUserInterests();
    const userDomains = feeds.map(feed => {
        try {
            return new URL(feed).hostname.replace('www.', '');
        } catch {
            return null;
        }
    }).filter(Boolean);

    let recommendations = [];

    // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userInterests.forEach(interest => {
        const categoryFeeds = RECOMMENDED_FEEDS[interest] || [];
        const newFeeds = categoryFeeds.filter(feed =>
            !feeds.includes(feed.url) &&
            !userDomains.includes(feed.domain)
        );
        recommendations.push(...newFeeds);
    });

    // –ï—Å–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –º–∞–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if (recommendations.length < recommendationSettings.maxRecommendations) {
        Object.values(RECOMMENDED_FEEDS).forEach(categoryFeeds => {
            categoryFeeds.forEach(feed => {
                if (!feeds.includes(feed.url) &&
                    !recommendations.find(r => r.url === feed.url)) {
                    recommendations.push(feed);
                }
            });
        });
    }

    return recommendations.slice(0, recommendationSettings.maxRecommendations * 2);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–º–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ placeholder
function updatePlaceholderWithRecommendations() {
    if (!recommendationSettings.enabled || feeds.length > 0) return;

    const personalizedRecommendations = getPersonalizedRecommendations().slice(0, 3);

    if (personalizedRecommendations.length === 0) return;

    const recommendationsHtml = personalizedRecommendations.map(feed => `
        <div class="placeholder-recommendation" onclick="addRecommendedFeed('${feed.url}', '${feed.name}', '${feed.category}')">
            <div class="placeholder-rec-icon">üì∞</div>
            <div class="placeholder-rec-info">
                <h4>${feed.name}</h4>
                <p>${feed.description}</p>
                <span class="placeholder-rec-category">${feed.category}</span>
            </div>
            <button class="placeholder-rec-btn">+ –î–æ–±–∞–≤–∏—Ç—å</button>
        </div>
    `).join('');

    const existingPlaceholder = document.querySelector('.placeholder');
    if (existingPlaceholder) {
        existingPlaceholder.innerHTML += `
            <div class="placeholder-recommendations">
                <h3>üåü –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ª–µ–Ω—Ç—ã</h3>
                <div class="placeholder-rec-list">
                    ${recommendationsHtml}
                </div>
                <button class="show-all-recommendations" onclick="showRecommendations()">
                    –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                </button>
            </div>
        `;
    }
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∏–ª–∏ –µ—Å–ª–∏ –Ω–µ—Ç –ª–µ–Ω—Ç
if (recommendationSettings.showOnStartup && feeds.length === 0) {
    setTimeout(() => {
        showRecommendations();
    }, 1000);
} else if (feeds.length === 0) {
    // –û–±–Ω–æ–≤–ª—è–µ–º placeholder —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    setTimeout(updatePlaceholderWithRecommendations, 500);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
function trackUserActivity(action, data = {}) {
    const activity = JSON.parse(localStorage.getItem('userActivity')) || {
        feedViews: {},
        categoryPreferences: {},
        lastActive: Date.now()
    };

    switch (action) {
        case 'viewFeed':
            const feedUrl = data.feedUrl;
            const category = feedCategories[feedUrl];

            activity.feedViews[feedUrl] = (activity.feedViews[feedUrl] || 0) + 1;
            if (category) {
                activity.categoryPreferences[category] = (activity.categoryPreferences[category] || 0) + 1;
            }
            break;

        case 'addFeed':
            const newCategory = data.category;
            if (newCategory) {
                activity.categoryPreferences[newCategory] = (activity.categoryPreferences[newCategory] || 0) + 5;
            }
            break;
    }

    activity.lastActive = Date.now();
    localStorage.setItem('userActivity', JSON.stringify(activity));
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
function getSmartRecommendations() {
    const activity = JSON.parse(localStorage.getItem('userActivity')) || {};
    const userInterests = analyzeUserInterests();
    const categoryPreferences = activity.categoryPreferences || {};

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const sortedCategories = Object.keys(RECOMMENDED_FEEDS).sort((a, b) => {
        const scoreA = (categoryPreferences[a] || 0) + (userInterests.includes(a) ? 10 : 0);
        const scoreB = (categoryPreferences[b] || 0) + (userInterests.includes(b) ? 10 : 0);
        return scoreB - scoreA;
    });

    let recommendations = [];

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    sortedCategories.forEach(category => {
        if (recommendationSettings.categories.includes(category)) {
            const categoryFeeds = RECOMMENDED_FEEDS[category] || [];
            const newFeeds = categoryFeeds.filter(feed => !feeds.includes(feed.url));
            recommendations.push(...newFeeds);
        }
    });

    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const uniqueRecommendations = recommendations.filter((feed, index, self) =>
        index === self.findIndex(f => f.url === feed.url)
    );

    return uniqueRecommendations.slice(0, recommendationSettings.maxRecommendations * 2);
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ª–µ–Ω—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
const originalSwitchFeed = switchFeed;
switchFeed = function (index) {
    const filteredFeeds = feeds.filter(
        (feed) =>
            categorySelect.value === "" ||
            feedCategories[feed] === categorySelect.value
    );

    if (filteredFeeds[index]) {
        trackUserActivity('viewFeed', { feedUrl: filteredFeeds[index] });
    }

    return originalSwitchFeed.apply(this, arguments);
};

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–µ–Ω—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
const originalAddRecommendedFeed = addRecommendedFeed;
addRecommendedFeed = async function (url, name, category) {
    const result = await originalAddRecommendedFeed.apply(this, arguments);
    trackUserActivity('addFeed', { category });
    return result;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö
function checkForNewRecommendations() {
    if (!recommendationSettings.enabled || feeds.length === 0) return;

    const lastCheck = localStorage.getItem('lastRecommendationCheck');
    const now = Date.now();
    const dayInMs = 24 * 60 * 60 * 1000;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –¥–µ–Ω—å
    if (!lastCheck || now - parseInt(lastCheck) > dayInMs) {
        const smartRecommendations = getSmartRecommendations();
        const newRecommendations = smartRecommendations.slice(0, 3);

        if (newRecommendations.length > 0) {
            setTimeout(() => {
                showNotification(`üåü –ù–∞–π–¥–µ–Ω–æ ${newRecommendations.length} –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∞—Å!`);
            }, 3000);
        }

        localStorage.setItem('lastRecommendationCheck', now.toString());
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
setTimeout(checkForNewRecommendations, 5000);

console.log('üöÄ Fluent RSS Reader –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω!');
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
function getAvailableCountries() {
    const countries = new Set();
    Object.values(RECOMMENDED_FEEDS).forEach(categoryFeeds => {
        categoryFeeds.forEach(feed => {
            if (feed.country) {
                countries.add(feed.country);
            }
        });
    });
    return Array.from(countries).sort();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
function getRecommendationStats() {
    let totalFeeds = 0;
    const languageStats = {};
    const countryStats = {};
    const qualityStats = { high: 0, medium: 0, low: 0 };

    Object.values(RECOMMENDED_FEEDS).forEach(categoryFeeds => {
        totalFeeds += categoryFeeds.length;
        categoryFeeds.forEach(feed => {
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —è–∑—ã–∫–∞–º
            languageStats[feed.language] = (languageStats[feed.language] || 0) + 1;

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
            countryStats[feed.country] = (countryStats[feed.country] || 0) + 1;

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
            if (feed.quality >= 9) qualityStats.high++;
            else if (feed.quality >= 7) qualityStats.medium++;
            else qualityStats.low++;
        });
    });

    return {
        total: totalFeeds,
        languages: languageStats,
        countries: countryStats,
        quality: qualityStats
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
function showRecommendationStats() {
    const stats = getRecommendationStats();
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', stats);
    console.log(`üì∞ –í—Å–µ–≥–æ –ª–µ–Ω—Ç: ${stats.total}`);
    console.log('üåç –ü–æ —Å—Ç—Ä–∞–Ω–∞–º:', stats.countries);
    console.log('üó£Ô∏è –ü–æ —è–∑—ã–∫–∞–º:', stats.languages);
    console.log('‚≠ê –ü–æ –∫–∞—á–µ—Å—Ç–≤—É:', `–í—ã—Å–æ–∫–æ–µ: ${stats.quality.high}, –°—Ä–µ–¥–Ω–µ–µ: ${stats.quality.medium}, –ù–∏–∑–∫–æ–µ: ${stats.quality.low}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
function searchRecommendations(query) {
    const results = [];
    const searchQuery = query.toLowerCase();

    Object.entries(RECOMMENDED_FEEDS).forEach(([category, categoryFeeds]) => {
        categoryFeeds.forEach(feed => {
            if (feed.name.toLowerCase().includes(searchQuery) ||
                feed.description.toLowerCase().includes(searchQuery) ||
                feed.domain.toLowerCase().includes(searchQuery) ||
                feed.country.toLowerCase().includes(searchQuery)) {
                results.push({ ...feed, category });
            }
        });
    });

    return results.sort((a, b) => b.quality - a.quality);
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
function showRecommendationStatsModal() {
    const stats = getRecommendationStats();
    const statsModal = document.createElement('div');
    statsModal.className = 'share-modal';
    const translation = translations[currentLanguage] || translations['ru'];

    const topCountries = Object.entries(stats.countries)
        .sort(([, a], [, b]) => b - a)
        .slice(0, 10);

    const topLanguages = Object.entries(stats.languages)
        .sort(([, a], [, b]) => b - a);

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
    const feedsWord = getFeedsWord(stats.total);
    const categoriesWord = getCategoriesWord(Object.keys(RECOMMENDED_FEEDS).length);
    const countriesWord = getCountriesWord(Object.keys(stats.countries).length);

    statsModal.innerHTML = `
        <div class="share-modal-close-overlay">
            <button class="close-btn focus-ring" onclick="this.parentElement.parentElement.remove()" aria-label="${t('close_statistics', '–ó–∞–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')}">√ó</button>
        </div>
        <div class="share-modal-content stats-content">
            <h3>üìä ${t('recommendations_statistics', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π')}</h3>
            
            <div class="stats-grid">
                <div class="stat-card">
                    <h4>üì∞ ${t('general_info', '–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')}</h4>
                    <p><strong>${t('total_feeds', '–í—Å–µ–≥–æ –ª–µ–Ω—Ç')}:</strong> ${stats.total} ${feedsWord}</p>
                    <p><strong>${t('total_categories', '–ö–∞—Ç–µ–≥–æ—Ä–∏–π')}:</strong> ${Object.keys(RECOMMENDED_FEEDS).length} ${categoriesWord}</p>
                    <p><strong>${t('total_countries', '–°—Ç—Ä–∞–Ω')}:</strong> ${Object.keys(stats.countries).length} ${countriesWord}</p>
                </div>
                
                <div class="stat-card">
                    <h4>‚≠ê ${t('quality_distribution', '–ö–∞—á–µ—Å—Ç–≤–æ')}</h4>
                    <p><strong>${t('high_quality', '–í—ã—Å–æ–∫–æ–µ (9-10)')}:</strong> ${stats.quality.high}</p>
                    <p><strong>${t('medium_quality', '–°—Ä–µ–¥–Ω–µ–µ (7-8)')}:</strong> ${stats.quality.medium}</p>
                    <p><strong>${t('low_quality', '–ù–∏–∑–∫–æ–µ (1-6)')}:</strong> ${stats.quality.low}</p>
                </div>
                
                ${createCategoryStatsCard()}
                
                <div class="stat-card">
                    <h4>üó£Ô∏è ${t('languages', '–Ø–∑—ã–∫–∏')}</h4>
                    ${topLanguages.map(([lang, count]) => {
        const langName = getLanguageName(lang);
        const feedsWord = getFeedsWord(count);
        return `<p><strong>${langName}:</strong> ${count} ${feedsWord}</p>`;
    }).join('')}
                </div>
                
                <div class="stat-card">
                    <h4>üåç ${t('top_countries', '–¢–æ–ø —Å—Ç—Ä–∞–Ω')}</h4>
                    ${topCountries.map(([country, count]) => {
        const feedsWord = getFeedsWord(count);
        return `<p><strong>${country}:</strong> ${count} ${feedsWord}</p>`;
    }).join('')}
                </div>
            </div>
            
            <div class="stats-actions">
                <button onclick="this.parentElement.parentElement.parentElement.remove()">
                    ${t('close', '–ó–∞–∫—Ä—ã—Ç—å')}
                </button>
            </div>
        </div>
    `;

    document.body.appendChild(statsModal);
    statsModal.style.display = 'flex';
    setTimeout(() => statsModal.classList.add('visible'), 10);

}// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
function exportRecommendations(format = 'json') {
    const stats = getRecommendationStats();
    const timestamp = new Date().toISOString().split('T')[0];

    let content, filename, mimeType;

    switch (format) {
        case 'json':
            content = JSON.stringify({
                metadata: {
                    exportDate: new Date().toISOString(),
                    totalFeeds: stats.total,
                    categories: Object.keys(RECOMMENDED_FEEDS).length
                },
                feeds: RECOMMENDED_FEEDS
            }, null, 2);
            filename = `rss-recommendations-${timestamp}.json`;
            mimeType = 'application/json';
            break;

        case 'csv':
            const csvRows = ['Name,URL,Domain,Description,Country,Language,Quality,Category'];
            Object.entries(RECOMMENDED_FEEDS).forEach(([category, feeds]) => {
                feeds.forEach(feed => {
                    csvRows.push([
                        `"${feed.name}"`,
                        `"${feed.url}"`,
                        `"${feed.domain}"`,
                        `"${feed.description}"`,
                        `"${feed.country}"`,
                        `"${feed.language}"`,
                        feed.quality,
                        `"${category}"`
                    ].join(','));
                });
            });
            content = csvRows.join('\n');
            filename = `rss-recommendations-${timestamp}.csv`;
            mimeType = 'text/csv';
            break;

        case 'opml':
            const opmlFeeds = [];
            Object.entries(RECOMMENDED_FEEDS).forEach(([category, feeds]) => {
                feeds.forEach(feed => {
                    opmlFeeds.push(`    <outline text="${feed.name}" title="${feed.name}" type="rss" xmlUrl="${feed.url}" htmlUrl="https://${feed.domain}" description="${feed.description}"/>`);
                });
            });
            content = `<?xml version="1.0" encoding="UTF-8"?>
<opml version="1.0">
  <head>
    <title>RSS Recommendations Export</title>
    <dateCreated>${new Date().toUTCString()}</dateCreated>
  </head>
  <body>
${opmlFeeds.join('\n')}
  </body>
</opml>`;
            filename = `rss-recommendations-${timestamp}.opml`;
            mimeType = 'text/x-opml';
            break;
    }

    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    showNotification(`–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ ${format.toUpperCase()}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
function showExportModal() {
    const exportModal = document.createElement('div');
    exportModal.className = 'share-modal';

    exportModal.innerHTML = `
        <div class="share-modal-close-overlay">
            <button class="close-btn focus-ring" onclick="this.parentElement.parentElement.remove()" aria-label="–ó–∞–∫—Ä—ã—Ç—å —ç–∫—Å–ø–æ—Ä—Ç">√ó</button>
        </div>
        <div class="share-modal-content export-content">
            <h3>üì§ ${t('export_recommendations', '–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π')}</h3>
            <p>${t('export_description', '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–∞–∑—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö RSS –ª–µ–Ω—Ç:')}</p>
            
            <div class="export-options">
                <div class="export-option" onclick="exportRecommendations('json'); this.parentElement.parentElement.parentElement.parentElement.remove()">
                    <div class="export-icon">üìÑ</div>
                    <div class="export-info">
                        <h4>JSON</h4>
                        <p>${t('json_description', '–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤')}</p>
                    </div>
                </div>
                
                <div class="export-option" onclick="exportRecommendations('csv'); this.parentElement.parentElement.parentElement.parentElement.remove()">
                    <div class="export-icon">üìä</div>
                    <div class="export-info">
                        <h4>CSV</h4>
                        <p>${t('csv_description', '–¢–∞–±–ª–∏—Ü–∞ –¥–ª—è Excel –∏ Google Sheets')}</p>
                    </div>
                </div>
                
                <div class="export-option" onclick="exportRecommendations('opml'); this.parentElement.parentElement.parentElement.parentElement.remove()">
                    <div class="export-icon">üì°</div>
                    <div class="export-info">
                        <h4>OPML</h4>
                        <p>${t('opml_description', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è RSS —á–∏—Ç–∞–ª–æ–∫')}</p>
                    </div>
                </div>
            </div>
            
            <div class="export-actions">
                <button onclick="this.parentElement.parentElement.parentElement.remove()">
                    ${t('cancel', '–û—Ç–º–µ–Ω–∞')}
                </button>
            </div>
        </div>
    `;

    document.body.appendChild(exportModal);
    exportModal.style.display = 'flex';
    setTimeout(() => exportModal.classList.add('visible'), 10);
}
// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ(–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
document.addEventListener('DOMContentLoaded', function () {
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –≤—Å–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
    setTimeout(() => {
        console.log('üåü –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π RSS –ª–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
        showRecommendationStats();

        console.log('\nüöÄ –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:');
        console.log('‚Ä¢ –õ–µ–Ω—Ç—ã –∏–∑', Object.keys(getRecommendationStats().countries).length, '—Å—Ç—Ä–∞–Ω');
        console.log('‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—á–µ—Å—Ç–≤—É, —è–∑—ã–∫—É –∏ —Å—Ç—Ä–∞–Ω–µ');
        console.log('‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º');
        console.log('‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON, CSV –∏ OPML');
        console.log('‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
        console.log('‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —Ñ–ª–∞–≥–∞–º–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏');
    }, 1000);
});
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
function testRecommendations() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...');
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏:', recommendationSettings);
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', Object.keys(RECOMMENDED_FEEDS).length);
    console.log('–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ–Ω—Ç:', Object.values(RECOMMENDED_FEEDS).flat().length);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é –ª–µ–Ω—Ç—É –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    Object.entries(RECOMMENDED_FEEDS).forEach(([category, feeds]) => {
        if (feeds.length > 0) {
            console.log(`${category}: ${feeds[0].name} (${feeds[0].country})`);
        }
    });

    // –ü—Ä–æ–±—É–µ–º –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    try {
        showRecommendations();
        console.log('‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.testRecommendations = testRecommendations;
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
function diagnoseAndFix() {
    console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:');
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ–Ω—Ç:', feeds.length);
    console.log('–õ–µ–Ω—Ç—ã:', feeds);
    console.log('–ù–∞–∑–≤–∞–Ω–∏—è –ª–µ–Ω—Ç:', feedNames);
    console.log('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–µ–Ω—Ç:', feedCategories);
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categories);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
    console.log('localStorage rssFeeds:', localStorage.getItem("rssFeeds"));
    console.log('localStorage feedNames:', localStorage.getItem("feedNames"));
    console.log('localStorage categories:', localStorage.getItem("categories"));

    // –ï—Å–ª–∏ –Ω–µ—Ç –ª–µ–Ω—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
    if (feeds.length === 0) {
        console.log('üìù –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä...');
        showPlaceholder();
    } else {
        console.log('üì∞ –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...');
        updateTabs();
        loadCurrentFeed();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('üåü –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', recommendationSettings);
    console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –ª–µ–Ω—Ç:', Object.values(RECOMMENDED_FEEDS).flat().length);
}

// –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.diagnoseAndFix = diagnoseAndFix;

// –í—ã–∑—ã–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function () {
    setTimeout(() => {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...');
        diagnoseAndFix();
    }, 500);
});
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–µ–Ω—Ç
function addTestFeeds() {
    console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–µ–Ω—Ç—ã...');

    const testFeeds = [
        {
            url: "https://lenta.ru/rss",
            name: "–õ–µ–Ω—Ç–∞.—Ä—É",
            category: "–ù–æ–≤–æ—Å—Ç–∏"
        },
        {
            url: "https://habr.com/ru/rss/hub/programming/",
            name: "–•–∞–±—Ä - –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
            category: "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"
        }
    ];

    testFeeds.forEach(feed => {
        if (!feeds.includes(feed.url)) {
            feeds.push(feed.url);
            feedNames[feed.url] = feed.name;
            feedCategories[feed.url] = feed.category;

            if (!categories.includes(feed.category)) {
                categories.push(feed.category);
            }
        }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem("rssFeeds", JSON.stringify(feeds));
    localStorage.setItem("feedNames", JSON.stringify(feedNames));
    localStorage.setItem("feedCategories", JSON.stringify(feedCategories));
    localStorage.setItem("categories", JSON.stringify(categories));

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    updateCategorySelect();
    updateTabs();
    loadCurrentFeed();

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ª–µ–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
}

// –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.addTestFeeds = addTestFeeds;
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ inline —Å—Ç–∏–ª–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function resetBottomNavStyles() {
    const bottomNav = document.getElementById('bottomNav');
    if (bottomNav) {
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ inline —Å—Ç–∏–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã JavaScript
        bottomNav.style.transform = '';
        bottomNav.style.opacity = '';
        bottomNav.style.left = '';
        bottomNav.style.right = '';
        bottomNav.style.width = '';
        bottomNav.style.bottom = '';

        console.log('üîß –°–±—Ä–æ—à–µ–Ω—ã inline —Å—Ç–∏–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
    }
}

// –í—ã–∑—ã–≤–∞–µ–º —Å–±—Ä–æ—Å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function () {
    resetBottomNavStyles();
});

// –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.resetBottomNavStyles = resetBottomNavStyles;
// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –≤—Å–µ—Ö —Å—Ç–∏–ª–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function forceResetNavigation() {
    const bottomNav = document.getElementById('bottomNav');
    if (bottomNav) {
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ inline —Å—Ç–∏–ª–∏
        const stylesToReset = [
            'transform', 'opacity', 'left', 'right', 'width', 'bottom',
            'top', 'margin', 'marginLeft', 'marginRight', 'position'
        ];

        stylesToReset.forEach(style => {
            bottomNav.style[style] = '';
        });

        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        bottomNav.classList.remove('scrolled');

        console.log('üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã –≤—Å–µ —Å—Ç–∏–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
    }
}

// –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
setInterval(forceResetNavigation, 5000);

// –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.forceResetNavigation = forceResetNavigation;
// –°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏(i18n)
const translations = {
    ru: {
        // –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        rss_url_label: "URL RSS-–ª–µ–Ω—Ç—ã",
        rss_url_placeholder: "–í–≤–µ–¥–∏—Ç–µ URL RSS-–ª–µ–Ω—Ç—ã",
        rss_help: "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π URL RSS –∏–ª–∏ Atom –ª–µ–Ω—Ç—ã",
        category_label: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
        category_select_aria: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
        all_categories: "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        add_feed_btn: "–î–æ–±–∞–≤–∏—Ç—å",
        add_help: "–î–æ–±–∞–≤–∏—Ç—å RSS –ª–µ–Ω—Ç—É –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
        add_category_btn: "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        refresh: "–û–±–Ω–æ–≤–∏—Ç—å",
        scroll_top: "–ù–∞–≤–µ—Ä—Ö",
        theme: "–¢–µ–º–∞",
        recommendations: "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
        menu: "–ú–µ–Ω—é",
        refresh_current_feed: "–û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –ª–µ–Ω—Ç—É",
        scroll_to_top: "–ü—Ä–æ–∫—Ä—É—Ç–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞–≤–µ—Ä—Ö",
        toggle_theme: "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è",
        show_recommendations: "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ RSS –ª–µ–Ω—Ç—ã",
        open_menu: "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π",

        // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        share: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
        copy_link: "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É",
        close: "–ó–∞–∫—Ä—ã—Ç—å",

        // –§—É—Ç–µ—Ä
        footer_description: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π RSS-—Ä–∏–¥–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —è–∑—ã–∫–æ–≤ –∏ –∫—Ä–∞—Å–∏–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º",
        footer_features: "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
        footer_multilingual: "–ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å",
        footer_offline: "–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º",
        footer_search: "–ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π",
        footer_categories: "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
        footer_languages: "–Ø–∑—ã–∫–∏",
        footer_created_by: "–°–æ–∑–¥–∞–Ω–æ —Å ‚ù§Ô∏è",
        footer_year: "2025",

        // –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
        actions_menu_title: "–î–µ–π—Å—Ç–≤–∏—è",
        close_menu: "–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é",
        actions_navigation: "–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º",
        main_actions_section: "–û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è",
        refresh_feed: "–û–±–Ω–æ–≤–∏—Ç—å –ª–µ–Ω—Ç—É",
        refresh_all_feeds: "–û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ª–µ–Ω—Ç—ã",
        change_theme: "–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É",
        feed_management_section: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–µ–Ω—Ç–∞–º–∏",
        recommended_feeds: "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ª–µ–Ω—Ç—ã",
        export_feeds: "–≠–∫—Å–ø–æ—Ä—Ç –ª–µ–Ω—Ç",
        import_feeds: "–ò–º–ø–æ—Ä—Ç –ª–µ–Ω—Ç",
        install_app: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
        dangerous_actions_section: "–û–ø–∞—Å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è",
        clear_all_feeds: "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–µ–Ω—Ç—ã",

        // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        close_modal: "–ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ",
        normal_mode: "–û–±—ã—á–Ω—ã–π",
        web_mode: "–í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞",
        share_modal_title: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
        close_share_modal: "–ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è",
        close_feed_manage: "–ó–∞–∫—Ä—ã—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–µ–Ω—Ç–∞–º–∏",
        feed_management_title: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–µ–Ω—Ç–∞–º–∏",

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
        refresh_all_feeds: "–û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ª–µ–Ω—Ç—ã",
        export_feeds: "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–µ–Ω—Ç—ã –≤ OPML —Ñ–∞–π–ª",
        import_feeds: "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–µ–Ω—Ç—ã –∏–∑ OPML —Ñ–∞–π–ª–∞",
        install_app: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∫ PWA",
        clear_all_feeds: "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ RSS –ª–µ–Ω—Ç—ã",

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        feed_added: "–õ–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞",
        feed_removed: "–õ–µ–Ω—Ç–∞ —É–¥–∞–ª–µ–Ω–∞",
        category_added: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞",
        error_invalid_url: "–ù–µ–≤–µ—Ä–Ω—ã–π URL",
        error_feed_exists: "–õ–µ–Ω—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",

        // –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        no_feeds_message: "–ù–µ—Ç –ª–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        loading_feed: "–ó–∞–≥—Ä—É–∑–∫–∞ –ª–µ–Ω—Ç—ã...",
        feed_load_error: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–µ–Ω—Ç—ã",
        no_articles: "–ù–µ—Ç —Å—Ç–∞—Ç–µ–π –≤ —ç—Ç–æ–π –ª–µ–Ω—Ç–µ",

        // –ö–Ω–æ–ø–∫–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è
        add_feed: "–î–æ–±–∞–≤–∏—Ç—å –ª–µ–Ω—Ç—É",
        remove_feed: "–£–¥–∞–ª–∏—Ç—å –ª–µ–Ω—Ç—É",
        edit_feed: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–µ–Ω—Ç—É",
        refresh_feed: "–û–±–Ω–æ–≤–∏—Ç—å –ª–µ–Ω—Ç—É",

        // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        no_category: "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        create_category: "–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
        category_name: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",

        // –ü–æ–∏—Å–∫
        search_placeholder: "–ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∞—Ç—å—è–º...",
        no_search_results: "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",

        // –í—Ä–µ–º—è
        just_now: "—Ç–æ–ª—å–∫–æ —á—Ç–æ",
        minutes_ago: "–º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥",
        hours_ago: "—á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥",
        days_ago: "–¥–Ω–µ–π –Ω–∞–∑–∞–¥",

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_feeds: "–í—Å–µ–≥–æ –ª–µ–Ω—Ç",
        total_articles: "–í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π",
        last_update: "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommended_rss_feeds: "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ RSS –ª–µ–Ω—Ç—ã",
        recommendations_description: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º –≤–∞—Å —Ç–µ–º–∞–º",
        close_recommendations: "–ó–∞–∫—Ä—ã—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
        settings: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        statistics: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        export: "–≠–∫—Å–ø–æ—Ä—Ç",
        all: "–í—Å–µ",
        add_feed: "–î–æ–±–∞–≤–∏—Ç—å",
        added: "–î–æ–±–∞–≤–ª–µ–Ω–æ",
        quality: "–ö–∞—á–µ—Å—Ç–≤–æ",
        language: "–Ø–∑—ã–∫",
        country: "–°—Ç—Ä–∞–Ω–∞",
        no_recommendations: "–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤",

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        recommendation_settings: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π",
        enable_recommendations: "–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
        show_on_startup: "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ",
        max_recommendations: "–ú–∞–∫—Å–∏–º—É–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π",
        min_quality: "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ",
        sort_by: "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞",
        sort_by_quality: "–ü–æ –∫–∞—á–µ—Å—Ç–≤—É",
        sort_by_name: "–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é",
        sort_by_country: "–ü–æ —Å—Ç—Ä–∞–Ω–µ",
        show_country_flags: "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–ª–∞–≥–∏ —Å—Ç—Ä–∞–Ω",
        group_by_country: "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Å—Ç—Ä–∞–Ω–∞–º",
        preferred_languages: "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —è–∑—ã–∫–∏",
        categories_for_recommendations: "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π",
        save: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
        reset: "–°–±—Ä–æ—Å–∏—Ç—å",

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        recommendations_statistics: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π",
        general_info: "–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        total_feeds: "–í—Å–µ–≥–æ –ª–µ–Ω—Ç",
        total_categories: "–ö–∞—Ç–µ–≥–æ—Ä–∏–π",
        total_countries: "–°—Ç—Ä–∞–Ω",
        quality_distribution: "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É",
        high_quality: "–í—ã—Å–æ–∫–æ–µ (9-10)",
        medium_quality: "–°—Ä–µ–¥–Ω–µ–µ (7-8)",
        low_quality: "–ù–∏–∑–∫–æ–µ (1-6)",
        languages: "–Ø–∑—ã–∫–∏",
        top_countries: "–¢–æ–ø —Å—Ç—Ä–∞–Ω",
        categories_stats: "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
        close_statistics: "–ó–∞–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
        close_settings: "–ó–∞–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        settings_saved: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
        settings_reset: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã",

        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–æ–≤–æ—Å—Ç–∏
        publication_date: "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
        article_author: "–ê–≤—Ç–æ—Ä —Å—Ç–∞—Ç—å–∏",
        author: "–ê–≤—Ç–æ—Ä",
        go_to_source: "–ü–µ—Ä–µ–π—Ç–∏ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É",
        page_load_error: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É",
        embedding_not_allowed: "–°–∞–π—Ç –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
        open_in_new_tab: "–û—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ",

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        loading: "–ó–∞–≥—Ä—É–∑–∫–∞...",
        error: "–û—à–∏–±–∫–∞",
        retry: "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å",
        cancel: "–û—Ç–º–µ–Ω–∞",
        confirm: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
        delete: "–£–¥–∞–ª–∏—Ç—å",
        edit: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
        save: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",

        // –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
        network_error: "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏",
        invalid_feed: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–µ–Ω—Ç—ã",
        feed_not_found: "–õ–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
        access_denied: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω",

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        now: "—Å–µ–π—á–∞—Å",
        minute: "–º–∏–Ω—É—Ç–∞",
        minutes: "–º–∏–Ω—É—Ç",
        hour: "—á–∞—Å",
        hours: "—á–∞—Å–æ–≤",
        day: "–¥–µ–Ω—å",
        days: "–¥–Ω–µ–π",
        week: "–Ω–µ–¥–µ–ª—è",
        weeks: "–Ω–µ–¥–µ–ª—å",
        month: "–º–µ—Å—è—Ü",
        months: "–º–µ—Å—è—Ü–µ–≤",
        year: "–≥–æ–¥",
        years: "–ª–µ—Ç",
        ago: "–Ω–∞–∑–∞–¥",

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        close_statistics: "–ó–∞–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
        categories_distribution: "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
    },

    en: {
        // Main interface
        rss_url_label: "RSS Feed URL",
        rss_url_placeholder: "Enter RSS feed URL",
        rss_help: "Enter full RSS or Atom feed URL",
        category_label: "Category",
        category_select_aria: "Select category",
        all_categories: "All categories",
        add_feed_btn: "Add",
        add_help: "Add RSS feed to selected category",
        add_category_btn: "Add category",

        // Navigation
        refresh: "Refresh",
        scroll_top: "Top",
        theme: "Theme",
        recommendations: "Recommendations",
        menu: "Menu",
        refresh_current_feed: "Refresh current feed",
        scroll_to_top: "Scroll to top",
        toggle_theme: "Toggle theme",
        show_recommendations: "Show recommended RSS feeds",
        open_menu: "Open actions menu",

        // Modals
        share: "Share",
        copy_link: "Copy link",
        close: "Close",

        // Footer
        footer_description: "Modern RSS reader with multilingual support and beautiful design",
        footer_features: "Features",
        footer_multilingual: "Multilingual",
        footer_offline: "Offline mode",
        footer_search: "Article search",
        footer_categories: "Categories",
        footer_languages: "Languages",
        footer_created_by: "Made with ‚ù§Ô∏è",
        footer_year: "2025",

        // Mobile menu
        actions_menu_title: "Actions",
        close_menu: "Close menu",
        actions_navigation: "Actions navigation",
        main_actions_section: "Main actions",
        refresh_feed: "Refresh feed",
        refresh_all_feeds: "Refresh all feeds",
        change_theme: "Change theme",
        feed_management_section: "Feed management",
        recommended_feeds: "Recommended feeds",
        export_feeds: "Export feeds",
        import_feeds: "Import feeds",
        install_app: "Install app",
        dangerous_actions_section: "Dangerous actions",
        clear_all_feeds: "Clear all feeds",

        // Modals
        close_modal: "Close modal",
        normal_mode: "Normal",
        web_mode: "Web page",
        share_modal_title: "Share",
        close_share_modal: "Close share modal",
        close_feed_manage: "Close feed management",
        feed_management_title: "Feed management",

        // Additional translations
        refresh_all_feeds: "Refresh all feeds",
        export_feeds: "Export feeds to OPML file",
        import_feeds: "Import feeds from OPML file",
        install_app: "Install app as PWA",
        clear_all_feeds: "Delete all RSS feeds",

        // Notifications
        feed_added: "Feed added",
        feed_removed: "Feed removed",
        category_added: "Category added",
        error_invalid_url: "Invalid URL",
        error_feed_exists: "Feed already exists",

        // Placeholders and messages
        no_feeds_message: "No feeds to display",
        loading_feed: "Loading feed...",
        feed_load_error: "Feed loading error",
        no_articles: "No articles in this feed",

        // Buttons and actions
        add_feed: "Add feed",
        remove_feed: "Remove feed",
        edit_feed: "Edit feed",
        refresh_feed: "Refresh feed",

        // Categories
        no_category: "No category",
        create_category: "Create category",
        category_name: "Category name",

        // Search
        search_placeholder: "Search articles...",
        no_search_results: "Nothing found",

        // Time
        just_now: "just now",
        minutes_ago: "minutes ago",
        hours_ago: "hours ago",
        days_ago: "days ago",

        // Statistics
        total_feeds: "Total feeds",
        total_articles: "Total articles",
        last_update: "Last update",

        // Recommendations
        recommended_rss_feeds: "Recommended RSS Feeds",
        recommendations_description: "Choose quality news sources for topics that interest you",
        close_recommendations: "Close recommendations",
        settings: "Settings",
        statistics: "Statistics",
        export: "Export",
        all: "All",
        add_feed: "Add",
        added: "Added",
        quality: "Quality",
        language: "Language",
        country: "Country",
        no_recommendations: "No recommendations for selected filters",

        // Recommendation settings
        recommendation_settings: "Recommendation Settings",
        enable_recommendations: "Enable recommendations",
        show_on_startup: "Show on startup",
        max_recommendations: "Maximum recommendations",
        min_quality: "Minimum quality",
        sort_by: "Sort by",
        sort_by_quality: "By quality",
        sort_by_name: "By name",
        sort_by_country: "By country",
        show_country_flags: "Show country flags",
        group_by_country: "Group by country",
        preferred_languages: "Preferred languages",
        categories_for_recommendations: "Categories for recommendations",
        save: "Save",
        reset: "Reset",

        // Recommendation statistics
        recommendations_statistics: "Recommendations Statistics",
        general_info: "General Information",
        total_feeds: "Total feeds",
        total_categories: "Categories",
        total_countries: "Countries",
        quality_distribution: "Quality Distribution",
        high_quality: "High (9-10)",
        medium_quality: "Medium (7-8)",
        low_quality: "Low (1-6)",
        languages: "Languages",
        top_countries: "Top Countries",
        categories_stats: "Categories",
        close_statistics: "Close statistics",
        close_settings: "Close settings",
        settings_saved: "Settings saved",
        settings_reset: "Settings reset",

        // News modal
        publication_date: "Publication date",
        article_author: "Article author",
        author: "Author",
        go_to_source: "Go to source",
        page_load_error: "Failed to load page",
        embedding_not_allowed: "Site does not allow embedding or is unavailable.",
        open_in_new_tab: "Open in new tab",

        // Additional interface elements
        loading: "Loading...",
        error: "Error",
        retry: "Retry",
        cancel: "Cancel",
        confirm: "Confirm",
        delete: "Delete",
        edit: "Edit",
        save: "Save",

        // Error messages
        network_error: "Network error",
        invalid_feed: "Invalid feed format",
        feed_not_found: "Feed not found",
        access_denied: "Access denied",

        // Time formatting
        now: "now",
        minute: "minute",
        minutes: "minutes",
        hour: "hour",
        hours: "hours",
        day: "day",
        days: "days",
        week: "week",
        weeks: "weeks",
        month: "month",
        months: "months",
        year: "year",
        years: "years",
        ago: "ago",

        // Additional translations for statistics
        close_statistics: "Close statistics",
        categories_distribution: "Categories Distribution"
    },

    uk: {
        // –û—Å–Ω–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        rss_url_label: "URL RSS-—Å—Ç—Ä—ñ—á–∫–∏",
        rss_url_placeholder: "–í–≤–µ–¥—ñ—Ç—å URL RSS-—Å—Ç—Ä—ñ—á–∫–∏",
        rss_help: "–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω–∏–π URL RSS –∞–±–æ Atom —Å—Ç—Ä—ñ—á–∫–∏",
        category_label: "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è",
        category_select_aria: "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é",
        all_categories: "–í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó",
        add_feed_btn: "–î–æ–¥–∞—Ç–∏",
        add_help: "–î–æ–¥–∞—Ç–∏ RSS —Å—Ç—Ä—ñ—á–∫—É –¥–æ –æ–±—Ä–∞–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó",
        add_category_btn: "–î–æ–¥–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é",

        // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
        refresh: "–û–Ω–æ–≤–∏—Ç–∏",
        scroll_top: "–í–≥–æ—Ä—É",
        theme: "–¢–µ–º–∞",
        recommendations: "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó",
        menu: "–ú–µ–Ω—é",

        // –ú–æ–¥–∞–ª—å–Ω—ñ –≤—ñ–∫–Ω–∞
        share: "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è",
        copy_link: "–ö–æ–ø—ñ—é–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è",
        close: "–ó–∞–∫—Ä–∏—Ç–∏",

        // –§—É—Ç–µ—Ä
        footer_description: "–°—É—á–∞—Å–Ω–∏–π RSS-—á–∏—Ç–∞—á –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –±–∞–≥–∞—Ç—å–æ—Ö –º–æ–≤ —Ç–∞ –∫—Ä–∞—Å–∏–≤–∏–º –¥–∏–∑–∞–π–Ω–æ–º",
        footer_features: "–ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ",
        footer_multilingual: "–ë–∞–≥–∞—Ç–æ–º–æ–≤–Ω—ñ—Å—Ç—å",
        footer_offline: "–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º",
        footer_search: "–ü–æ—à—É–∫ —Å—Ç–∞—Ç–µ–π",
        footer_categories: "–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó",
        footer_languages: "–ú–æ–≤–∏",
        footer_created_by: "–°—Ç–≤–æ—Ä–µ–Ω–æ –∑ ‚ù§Ô∏è",
        footer_year: "2025",

        // –ú–æ–±—ñ–ª—å–Ω–µ –º–µ–Ω—é
        actions_menu_title: "–î—ñ—ó",
        close_menu: "–ó–∞–∫—Ä–∏—Ç–∏ –º–µ–Ω—é",
        actions_navigation: "–ù–∞–≤—ñ–≥–∞—Ü—ñ—è –ø–æ –¥—ñ—è—Ö",
        main_actions_section: "–û—Å–Ω–æ–≤–Ω—ñ –¥—ñ—ó",
        refresh_feed: "–û–Ω–æ–≤–∏—Ç–∏ —Å—Ç—Ä—ñ—á–∫—É",
        refresh_all_feeds: "–û–Ω–æ–≤–∏—Ç–∏ –≤—Å—ñ —Å—Ç—Ä—ñ—á–∫–∏",
        change_theme: "–ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–º—É",
        feed_management_section: "–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç—Ä—ñ—á–∫–∞–º–∏",
        recommended_feeds: "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ —Å—Ç—Ä—ñ—á–∫–∏",
        export_feeds: "–ï–∫—Å–ø–æ—Ä—Ç —Å—Ç—Ä—ñ—á–æ–∫",
        import_feeds: "–Ü–º–ø–æ—Ä—Ç —Å—Ç—Ä—ñ—á–æ–∫",
        install_app: "–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫",
        dangerous_actions_section: "–ù–µ–±–µ–∑–ø–µ—á–Ω—ñ –¥—ñ—ó",
        clear_all_feeds: "–û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ —Å—Ç—Ä—ñ—á–∫–∏",

        // –ú–æ–¥–∞–ª—å–Ω—ñ –≤—ñ–∫–Ω–∞
        close_modal: "–ó–∞–∫—Ä–∏—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ",
        normal_mode: "–ó–≤–∏—á–∞–π–Ω–∏–π",
        web_mode: "–í–µ–±-—Å—Ç–æ—Ä—ñ–Ω–∫–∞",
        share_modal_title: "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è",
        close_share_modal: "–ó–∞–∫—Ä–∏—Ç–∏ –≤—ñ–∫–Ω–æ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è",
        close_feed_manage: "–ó–∞–∫—Ä–∏—Ç–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç—Ä—ñ—á–∫–∞–º–∏",
        feed_management_title: "–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç—Ä—ñ—á–∫–∞–º–∏",

        // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
        refresh_all_feeds: "–û–Ω–æ–≤–∏—Ç–∏ –≤—Å—ñ —Å—Ç—Ä—ñ—á–∫–∏",
        export_feeds: "–ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Å—Ç—Ä—ñ—á–∫–∏ –≤ OPML —Ñ–∞–π–ª",
        import_feeds: "–Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Å—Ç—Ä—ñ—á–∫–∏ –∑ OPML —Ñ–∞–π–ª—É",
        install_app: "–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫ —è–∫ PWA",
        clear_all_feeds: "–í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ RSS —Å—Ç—Ä—ñ—á–∫–∏",

        // –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        feed_added: "–°—Ç—Ä—ñ—á–∫—É –¥–æ–¥–∞–Ω–æ",
        feed_removed: "–°—Ç—Ä—ñ—á–∫—É –≤–∏–¥–∞–ª–µ–Ω–æ",
        category_added: "–ö–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–æ–¥–∞–Ω–æ",
        error_invalid_url: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π URL",
        error_feed_exists: "–°—Ç—Ä—ñ—á–∫–∞ –≤–∂–µ —ñ—Å–Ω—É—î",

        // –ó–∞–ø–æ–≤–Ω—é–≤–∞—á—ñ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        no_feeds_message: "–ù–µ–º–∞—î —Å—Ç—Ä—ñ—á–æ–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è",
        loading_feed: "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç—Ä—ñ—á–∫–∏...",
        feed_load_error: "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç—Ä—ñ—á–∫–∏",
        no_articles: "–ù–µ–º–∞—î —Å—Ç–∞—Ç–µ–π —É —Ü—ñ–π —Å—Ç—Ä—ñ—á—Ü—ñ",

        // –ö–Ω–æ–ø–∫–∏ —Ç–∞ –¥—ñ—ó
        add_feed: "–î–æ–¥–∞—Ç–∏ —Å—Ç—Ä—ñ—á–∫—É",
        remove_feed: "–í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç—Ä—ñ—á–∫—É",
        edit_feed: "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å—Ç—Ä—ñ—á–∫—É",
        refresh_feed: "–û–Ω–æ–≤–∏—Ç–∏ —Å—Ç—Ä—ñ—á–∫—É",

        // –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó
        no_category: "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó",
        create_category: "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é",
        category_name: "–ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó",

        // –ü–æ—à—É–∫
        search_placeholder: "–ü–æ—à—É–∫ –ø–æ —Å—Ç–∞—Ç—Ç—è—Ö...",
        no_search_results: "–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",

        // –ß–∞—Å
        just_now: "—â–æ–π–Ω–æ",
        minutes_ago: "—Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É",
        hours_ago: "–≥–æ–¥–∏–Ω —Ç–æ–º—É",
        days_ago: "–¥–Ω—ñ–≤ —Ç–æ–º—É",

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_feeds: "–í—Å—å–æ–≥–æ —Å—Ç—Ä—ñ—á–æ–∫",
        total_articles: "–í—Å—å–æ–≥–æ —Å—Ç–∞—Ç–µ–π",
        last_update: "–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è",

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        recommended_rss_feeds: "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ RSS —Å—Ç—Ä—ñ—á–∫–∏",
        recommendations_description: "–û–±–µ—Ä—ñ—Ç—å —è–∫—ñ—Å–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞ –Ω–æ–≤–∏–Ω –∑–∞ —Ç–µ–º–∞–º–∏, —è–∫—ñ –≤–∞—Å —Ü—ñ–∫–∞–≤–ª—è—Ç—å",
        close_recommendations: "–ó–∞–∫—Ä–∏—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó",
        settings: "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
        statistics: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        export: "–ï–∫—Å–ø–æ—Ä—Ç",
        all: "–í—Å—ñ",
        add_feed: "–î–æ–¥–∞—Ç–∏",
        added: "–î–æ–¥–∞–Ω–æ",
        quality: "–Ø–∫—ñ—Å—Ç—å",
        language: "–ú–æ–≤–∞",
        country: "–ö—Ä–∞—ó–Ω–∞",
        no_recommendations: "–ù–µ–º–∞—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤",

        // –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –Ω–æ–≤–∏–Ω–∏
        publication_date: "–î–∞—Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó",
        article_author: "–ê–≤—Ç–æ—Ä —Å—Ç–∞—Ç—Ç—ñ",
        author: "–ê–≤—Ç–æ—Ä",
        go_to_source: "–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –¥–∂–µ—Ä–µ–ª–∞",
        page_load_error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É",
        embedding_not_allowed: "–°–∞–π—Ç –Ω–µ –¥–æ–∑–≤–æ–ª—è—î –≤–±—É–¥–æ–≤—É–≤–∞–Ω–Ω—è –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.",
        open_in_new_tab: "–í—ñ–¥–∫—Ä–∏—Ç–∏ –≤ –Ω–æ–≤—ñ–π –≤–∫–ª–∞–¥—Ü—ñ",

        // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É
        now: "–∑–∞—Ä–∞–∑",
        minute: "—Ö–≤–∏–ª–∏–Ω–∞",
        minutes: "—Ö–≤–∏–ª–∏–Ω",
        hour: "–≥–æ–¥–∏–Ω–∞",
        hours: "–≥–æ–¥–∏–Ω",
        day: "–¥–µ–Ω—å",
        days: "–¥–Ω—ñ–≤",
        week: "—Ç–∏–∂–¥–µ–Ω—å",
        weeks: "—Ç–∏–∂–Ω—ñ–≤",
        month: "–º—ñ—Å—è—Ü—å",
        months: "–º—ñ—Å—è—Ü—ñ–≤",
        year: "—Ä—ñ–∫",
        years: "—Ä–æ–∫—ñ–≤",
        ago: "—Ç–æ–º—É",

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
        recommendations_statistics: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π",
        general_info: "–ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è",
        total_feeds: "–í—Å—å–æ–≥–æ —Å—Ç—Ä—ñ—á–æ–∫",
        total_categories: "–ö–∞—Ç–µ–≥–æ—Ä—ñ–π",
        total_countries: "–ö—Ä–∞—ó–Ω",
        quality_distribution: "–†–æ–∑–ø–æ–¥—ñ–ª –∑–∞ —è–∫—ñ—Å—Ç—é",
        high_quality: "–í–∏—Å–æ–∫–µ (9-10)",
        medium_quality: "–°–µ—Ä–µ–¥–Ω—î (7-8)",
        low_quality: "–ù–∏–∑—å–∫–µ (1-6)",
        languages: "–ú–æ–≤–∏",
        top_countries: "–¢–æ–ø –∫—Ä–∞—ó–Ω",
        categories_stats: "–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó",
        close_statistics: "–ó–∞–∫—Ä–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
        close_settings: "–ó–∞–∫—Ä–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
        settings_saved: "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ",
        settings_reset: "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∫–∏–Ω—É—Ç–æ",

        // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        close_statistics: "–ó–∞–∫—Ä–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
        categories_distribution: "–†–æ–∑–ø–æ–¥—ñ–ª –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö"
    },

    pl: {
        // G≈Ç√≥wny interfejs
        rss_url_label: "URL kana≈Çu RSS",
        rss_url_placeholder: "Wprowad≈∫ URL kana≈Çu RSS",
        rss_help: "Wprowad≈∫ pe≈Çny URL kana≈Çu RSS lub Atom",
        category_label: "Kategoria",
        category_select_aria: "Wybierz kategoriƒô",
        all_categories: "Wszystkie kategorie",
        add_feed_btn: "Dodaj",
        add_help: "Dodaj kana≈Ç RSS do wybranej kategorii",
        add_category_btn: "Dodaj kategoriƒô",

        // Nawigacja
        refresh: "Od≈õwie≈º",
        scroll_top: "Na g√≥rƒô",
        theme: "Motyw",
        recommendations: "Rekomendacje",
        menu: "Menu",

        // Okna modalne
        share: "Udostƒôpnij",
        copy_link: "Kopiuj link",
        close: "Zamknij",

        // Stopka
        footer_description: "Nowoczesny czytnik RSS z obs≈ÇugƒÖ wielu jƒôzyk√≥w i piƒôknym designem",
        footer_features: "Funkcje",
        footer_multilingual: "Wielojƒôzyczno≈õƒá",
        footer_offline: "Tryb offline",
        footer_search: "Wyszukiwanie artyku≈Ç√≥w",
        footer_categories: "Kategorie",
        footer_languages: "Jƒôzyki",
        footer_created_by: "Stworzone z ‚ù§Ô∏è",
        footer_year: "2025",

        // Menu mobilne
        actions_menu_title: "Akcje",
        close_menu: "Zamknij menu",
        actions_navigation: "Nawigacja akcji",
        main_actions_section: "G≈Ç√≥wne akcje",
        refresh_feed: "Od≈õwie≈º kana≈Ç",
        refresh_all_feeds: "Od≈õwie≈º wszystkie kana≈Çy",
        change_theme: "Zmie≈Ñ motyw",
        feed_management_section: "ZarzƒÖdzanie kana≈Çami",
        recommended_feeds: "Polecane kana≈Çy",
        export_feeds: "Eksport kana≈Ç√≥w",
        import_feeds: "Import kana≈Ç√≥w",
        install_app: "Zainstaluj aplikacjƒô",
        dangerous_actions_section: "Niebezpieczne akcje",
        clear_all_feeds: "Wyczy≈õƒá wszystkie kana≈Çy",

        // Okna modalne
        close_modal: "Zamknij okno modalne",
        normal_mode: "Normalny",
        web_mode: "Strona internetowa",
        share_modal_title: "Udostƒôpnij",
        close_share_modal: "Zamknij okno udostƒôpniania",
        close_feed_manage: "Zamknij zarzƒÖdzanie kana≈Çami",
        feed_management_title: "ZarzƒÖdzanie kana≈Çami",

        // Dodatkowe t≈Çumaczenia
        refresh_all_feeds: "Od≈õwie≈º wszystkie kana≈Çy",
        export_feeds: "Eksportuj kana≈Çy do pliku OPML",
        import_feeds: "Importuj kana≈Çy z pliku OPML",
        install_app: "Zainstaluj aplikacjƒô jako PWA",
        clear_all_feeds: "Usu≈Ñ wszystkie kana≈Çy RSS",

        // Powiadomienia
        feed_added: "Kana≈Ç dodany",
        feed_removed: "Kana≈Ç usuniƒôty",
        category_added: "Kategoria dodana",
        error_invalid_url: "Nieprawid≈Çowy URL",
        error_feed_exists: "Kana≈Ç ju≈º istnieje",

        // Symbole zastƒôpcze i wiadomo≈õci
        no_feeds_message: "Brak kana≈Ç√≥w do wy≈õwietlenia",
        loading_feed: "≈Åadowanie kana≈Çu...",
        feed_load_error: "B≈ÇƒÖd ≈Çadowania kana≈Çu",
        no_articles: "Brak artyku≈Ç√≥w w tym kanale",

        // Przyciski i akcje
        add_feed: "Dodaj kana≈Ç",
        remove_feed: "Usu≈Ñ kana≈Ç",
        edit_feed: "Edytuj kana≈Ç",
        refresh_feed: "Od≈õwie≈º kana≈Ç",

        // Kategorie
        no_category: "Bez kategorii",
        create_category: "Utw√≥rz kategoriƒô",
        category_name: "Nazwa kategorii",

        // Wyszukiwanie
        search_placeholder: "Szukaj artyku≈Ç√≥w...",
        no_search_results: "Nic nie znaleziono",

        // Czas
        just_now: "w≈Ça≈õnie teraz",
        minutes_ago: "minut temu",
        hours_ago: "godzin temu",
        days_ago: "dni temu",

        // Statystyki
        total_feeds: "≈ÅƒÖcznie kana≈Ç√≥w",
        total_articles: "≈ÅƒÖcznie artyku≈Ç√≥w",
        last_update: "Ostatnia aktualizacja",

        // Re
        recommended_rss_feeds: "Polecane kana≈Çy RSS",
        recommendations_description: "Wybierz wysokiej jako≈õci ≈∫r√≥d≈Ça wiadomo≈õci na interesujƒÖce Ciƒô tematy",
        close_recommendations: "Zamknij rekomendacje",
        settings: "Ustawienia",
        statistics: "Statystyki",
        export: "Eksport",
        all: "Wszystkie",
        add_feed: "Dodaj",
        added: "Dodano",
        quality: "Jako≈õƒá",
        language: "Jƒôzyk",
        country: "Kraj",
        no_recommendations: "Brak rekomendacji dla wybranych filtr√≥w",

        // Okno modalne wiadomo≈õci
        publication_date: "Data publikacji",
        article_author: "Autor artyku≈Çu",
        author: "Autor",
        go_to_source: "Przejd≈∫ do ≈∫r√≥d≈Ça",
        page_load_error: "Nie uda≈Ço siƒô za≈Çadowaƒá strony",
        embedding_not_allowed: "Strona nie pozwala na osadzanie lub jest niedostƒôpna.",
        open_in_new_tab: "Otw√≥rz w nowej karcie",

        // Formatowanie czasu
        now: "teraz",
        minute: "minuta",
        minutes: "minut",
        hour: "godzina",
        hours: "godzin",
        day: "dzie≈Ñ",
        days: "dni",
        week: "tydzie≈Ñ",
        weeks: "tygodni",
        month: "miesiƒÖc",
        months: "miesiƒôcy",
        year: "rok",
        years: "lat",
        ago: "temu",

        // Statystyki rekomendacji
        recommendations_statistics: "Statystyki rekomendacji",
        general_info: "Informacje og√≥lne",
        total_feeds: "≈ÅƒÖcznie kana≈Ç√≥w",
        total_categories: "Kategorii",
        total_countries: "Kraj√≥w",
        quality_distribution: "Rozk≈Çad jako≈õci",
        high_quality: "Wysokie (9-10)",
        medium_quality: "≈örednie (7-8)",
        low_quality: "Niskie (1-6)",
        languages: "Jƒôzyki",
        top_countries: "Najlepsze kraje",
        categories_stats: "Kategorie",
        close_statistics: "Zamknij statystyki",
        close_settings: "Zamknij ustawienia",
        settings_saved: "Ustawienia zapisane",
        settings_reset: "Ustawienia zresetowane",

        // Dodatkowe t≈Çumaczenia dla statystyk
        close_statistics: "Zamknij statystyki"
    },

    cs: {
        // Hlavn√≠ rozhran√≠
        rss_url_label: "URL RSS kan√°lu",
        rss_url_placeholder: "Zadejte URL RSS kan√°lu",
        rss_help: "Zadejte √∫plnou URL RSS nebo Atom kan√°lu",
        category_label: "Kategorie",
        category_select_aria: "Vyberte kategorii",
        all_categories: "V≈°echny kategorie",
        add_feed_btn: "P≈ôidat",
        add_help: "P≈ôidat RSS kan√°l do vybran√© kategorie",
        add_category_btn: "P≈ôidat kategorii",

        // Navigace
        refresh: "Obnovit",
        scroll_top: "Nahoru",
        theme: "T√©ma",
        recommendations: "Doporuƒçen√≠",
        menu: "Menu",

        // Mod√°ln√≠ okna
        share: "Sd√≠let",
        copy_link: "Kop√≠rovat odkaz",
        close: "Zav≈ô√≠t",

        // Z√°pat√≠
        footer_description: "Modern√≠ RSS ƒçteƒçka s podporou v√≠ce jazyk≈Ø a kr√°sn√Ωm designem",
        footer_features: "Funkce",
        footer_multilingual: "V√≠cejazyƒçnost",
        footer_offline: "Offline re≈æim",
        footer_search: "Vyhled√°v√°n√≠ ƒçl√°nk≈Ø",
        footer_categories: "Kategorie",
        footer_languages: "Jazyky",
        footer_created_by: "Vytvo≈ôeno s ‚ù§Ô∏è",
        footer_year: "2025",

        // Mobiln√≠ menu
        actions_menu_title: "Akce",
        close_menu: "Zav≈ô√≠t menu",
        actions_navigation: "Navigace akc√≠",
        main_actions_section: "Hlavn√≠ akce",
        refresh_feed: "Obnovit kan√°l",
        refresh_all_feeds: "Obnovit v≈°echny kan√°ly",
        change_theme: "Zmƒõnit t√©ma",
        feed_management_section: "Spr√°va kan√°l≈Ø",
        recommended_feeds: "Doporuƒçen√© kan√°ly",
        export_feeds: "Export kan√°l≈Ø",
        import_feeds: "Import kan√°l≈Ø",
        install_app: "Nainstalovat aplikaci",
        dangerous_actions_section: "Nebezpeƒçn√© akce",
        clear_all_feeds: "Vymazat v≈°echny kan√°ly",

        // Mod√°ln√≠ okna
        close_modal: "Zav≈ô√≠t mod√°ln√≠ okno",
        normal_mode: "Norm√°ln√≠",
        web_mode: "Webov√° str√°nka",
        share_modal_title: "Sd√≠let",
        close_share_modal: "Zav≈ô√≠t okno sd√≠len√≠",
        close_feed_manage: "Zav≈ô√≠t spr√°vu kan√°l≈Ø",
        feed_management_title: "Spr√°va kan√°l≈Ø",

        // Dal≈°√≠ p≈ôeklady
        refresh_all_feeds: "Obnovit v≈°echny kan√°ly",
        export_feeds: "Exportovat kan√°ly do OPML souboru",
        import_feeds: "Importovat kan√°ly z OPML souboru",
        install_app: "Nainstalovat aplikaci jako PWA",
        clear_all_feeds: "Smazat v≈°echny RSS kan√°ly",

        // Ozn√°men√≠
        feed_added: "Kan√°l p≈ôid√°n",
        feed_removed: "Kan√°l odstranƒõn",
        category_added: "Kategorie p≈ôid√°na",
        error_invalid_url: "Neplatn√° URL",
        error_feed_exists: "Kan√°l ji≈æ existuje",

        // Z√°stupn√© symboly a zpr√°vy
        no_feeds_message: "≈Ω√°dn√© kan√°ly k zobrazen√≠",
        loading_feed: "Naƒç√≠t√°n√≠ kan√°lu...",
        feed_load_error: "Chyba naƒç√≠t√°n√≠ kan√°lu",
        no_articles: "≈Ω√°dn√© ƒçl√°nky v tomto kan√°lu",

        // Tlaƒç√≠tka a akce
        add_feed: "P≈ôidat kan√°l",
        remove_feed: "Odstranit kan√°l",
        edit_feed: "Upravit kan√°l",
        refresh_feed: "Obnovit kan√°l",

        // Kategorie
        no_category: "Bez kategorie",
        create_category: "Vytvo≈ôit kategorii",
        category_name: "N√°zev kategorie",

        // Vyhled√°v√°n√≠
        search_placeholder: "Hledat ƒçl√°nky...",
        no_search_results: "Nic nenalezeno",

        // ƒåas
        just_now: "pr√°vƒõ teƒè",
        minutes_ago: "minut zpƒõt",
        hours_ago: "hodin zpƒõt",
        days_ago: "dn√≠ zpƒõt",

        // Statistiky
        total_feeds: "Celkem kan√°l≈Ø",
        total_articles: "Celkem ƒçl√°nk≈Ø",
        last_update: "Posledn√≠ aktualizace",

        // Doporuƒçen√≠
        recommended_rss_feeds: "Doporuƒçen√© RSS kan√°ly",
        recommendations_description: "Vyberte kvalitn√≠ zdroje zpr√°v na t√©mata, kter√° v√°s zaj√≠maj√≠",
        close_recommendations: "Zav≈ô√≠t doporuƒçen√≠",
        settings: "Nastaven√≠",
        statistics: "Statistiky",
        export: "Export",
        all: "V≈°echny",
        add_feed: "P≈ôidat",
        added: "P≈ôid√°no",
        quality: "Kvalita",
        language: "Jazyk",
        country: "Zemƒõ",
        no_recommendations: "≈Ω√°dn√° doporuƒçen√≠ pro vybran√© filtry",

        // Mod√°ln√≠ okno zpr√°vy
        publication_date: "Datum publikace",
        article_author: "Autor ƒçl√°nku",
        author: "Autor",
        go_to_source: "P≈ôej√≠t ke zdroji",
        page_load_error: "Nepoda≈ôilo se naƒç√≠st str√°nku",
        embedding_not_allowed: "Str√°nka neumo≈æ≈àuje vkl√°d√°n√≠ nebo nen√≠ dostupn√°.",
        open_in_new_tab: "Otev≈ô√≠t v nov√© kartƒõ",

        // Form√°tov√°n√≠ ƒçasu
        now: "nyn√≠",
        minute: "minuta",
        minutes: "minut",
        hour: "hodina",
        hours: "hodin",
        day: "den",
        days: "dn√≠",
        week: "t√Ωden",
        weeks: "t√Ωdn≈Ø",
        month: "mƒõs√≠c",
        months: "mƒõs√≠c≈Ø",
        year: "rok",
        years: "let",
        ago: "zpƒõt",

        // Statistiky doporuƒçen√≠
        recommendations_statistics: "Statistiky doporuƒçen√≠",
        general_info: "Obecn√© informace",
        total_feeds: "Celkem kan√°l≈Ø",
        total_categories: "Kategori√≠",
        total_countries: "Zem√≠",
        quality_distribution: "Rozdƒõlen√≠ kvality",
        high_quality: "Vysok√© (9-10)",
        medium_quality: "St≈ôedn√≠ (7-8)",
        low_quality: "N√≠zk√© (1-6)",
        languages: "Jazyky",
        top_countries: "Top zemƒõ",
        categories_stats: "Kategorie",
        close_statistics: "Zav≈ô√≠t statistiky",
        close_settings: "Zav≈ô√≠t nastaven√≠",
        settings_saved: "Nastaven√≠ ulo≈æeno",
        settings_reset: "Nastaven√≠ resetov√°no",

        // Dal≈°√≠ p≈ôeklady pro statistiky
        close_statistics: "Zav≈ô√≠t statistiky"
    },

    bg: {
        // –û—Å–Ω–æ–≤–µ–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        rss_url_label: "URL –Ω–∞ RSS –µ–º–∏—Å–∏—è",
        rss_url_placeholder: "–í—ä–≤–µ–¥–µ—Ç–µ URL –Ω–∞ RSS –µ–º–∏—Å–∏—è",
        rss_help: "–í—ä–≤–µ–¥–µ—Ç–µ –ø—ä–ª–µ–Ω URL –Ω–∞ RSS –∏–ª–∏ Atom –µ–º–∏—Å–∏—è",
        category_label: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
        category_select_aria: "–ò–∑–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
        all_categories: "–í—Å–∏—á–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        add_feed_btn: "–î–æ–±–∞–≤–∏",
        add_help: "–î–æ–±–∞–≤–∏ RSS –µ–º–∏—Å–∏—è –∫—ä–º –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
        add_category_btn: "–î–æ–±–∞–≤–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è",

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        refresh: "–û–±–Ω–æ–≤–∏",
        scroll_top: "–ù–∞–≥–æ—Ä–µ",
        theme: "–¢–µ–º–∞",
        recommendations: "–ü—Ä–µ–ø–æ—Ä—ä–∫–∏",
        menu: "–ú–µ–Ω—é",

        // –ú–æ–¥–∞–ª–Ω–∏ –ø—Ä–æ–∑–æ—Ä—Ü–∏
        share: "–°–ø–æ–¥–µ–ª–∏",
        copy_link: "–ö–æ–ø–∏—Ä–∞–π –≤—Ä—ä–∑–∫–∞",
        close: "–ó–∞—Ç–≤–æ—Ä–∏",

        // –î–æ–ª–µ–Ω –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª
        footer_description: "–ú–æ–¥–µ—Ä–µ–Ω RSS —á–µ—Ç–µ—Ü —Å –ø–æ–¥–¥—Ä—ä–∂–∫–∞ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –µ–∑–∏—Ü–∏ –∏ –∫—Ä–∞—Å–∏–≤ –¥–∏–∑–∞–π–Ω",
        footer_features: "–§—É–Ω–∫—Ü–∏–∏",
        footer_multilingual: "–ú–Ω–æ–≥–æ–µ–∑–∏—á–Ω–æ—Å—Ç",
        footer_offline: "–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º",
        footer_search: "–¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ —Å—Ç–∞—Ç–∏–∏",
        footer_categories: "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
        footer_languages: "–ï–∑–∏—Ü–∏",
        footer_created_by: "–°—ä–∑–¥–∞–¥–µ–Ω–æ —Å ‚ù§Ô∏è",
        footer_year: "2025",

        // –ú–æ–±–∏–ª–Ω–æ –º–µ–Ω—é
        actions_menu_title: "–î–µ–π—Å—Ç–≤–∏—è",
        close_menu: "–ó–∞—Ç–≤–æ—Ä–∏ –º–µ–Ω—é",
        actions_navigation: "–ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è—Ç–∞",
        main_actions_section: "–û—Å–Ω–æ–≤–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—è",
        refresh_feed: "–û–±–Ω–æ–≤–∏ –µ–º–∏—Å–∏—è",
        refresh_all_feeds: "–û–±–Ω–æ–≤–∏ –≤—Å–∏—á–∫–∏ –µ–º–∏—Å–∏–∏",
        change_theme: "–°–º–µ–Ω–∏ —Ç–µ–º–∞",
        feed_management_section: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –µ–º–∏—Å–∏–∏",
        recommended_feeds: "–ü—Ä–µ–ø–æ—Ä—ä—á–∞–Ω–∏ –µ–º–∏—Å–∏–∏",
        export_feeds: "–ï–∫—Å–ø–æ—Ä—Ç –Ω–∞ –µ–º–∏—Å–∏–∏",
        import_feeds: "–ò–º–ø–æ—Ä—Ç –Ω–∞ –µ–º–∏—Å–∏–∏",
        install_app: "–ò–Ω—Å—Ç–∞–ª–∏—Ä–∞–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
        dangerous_actions_section: "–û–ø–∞—Å–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—è",
        clear_all_feeds: "–ò–∑—á–∏—Å—Ç–∏ –≤—Å–∏—á–∫–∏ –µ–º–∏—Å–∏–∏",

        // –ú–æ–¥–∞–ª–Ω–∏ –ø—Ä–æ–∑–æ—Ä—Ü–∏
        close_modal: "–ó–∞—Ç–≤–æ—Ä–∏ –º–æ–¥–∞–ª–µ–Ω –ø—Ä–æ–∑–æ—Ä–µ—Ü",
        normal_mode: "–ù–æ—Ä–º–∞–ª–µ–Ω",
        web_mode: "–£–µ–± —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
        share_modal_title: "–°–ø–æ–¥–µ–ª–∏",
        close_share_modal: "–ó–∞—Ç–≤–æ—Ä–∏ –ø—Ä–æ–∑–æ—Ä–µ—Ü –∑–∞ —Å–ø–æ–¥–µ–ª—è–Ω–µ",
        close_feed_manage: "–ó–∞—Ç–≤–æ—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –µ–º–∏—Å–∏–∏",
        feed_management_title: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –µ–º–∏—Å–∏–∏",

        // –î–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∏ –ø—Ä–µ–≤–æ–¥–∏
        refresh_all_feeds: "–û–±–Ω–æ–≤–∏ –≤—Å–∏—á–∫–∏ –µ–º–∏—Å–∏–∏",
        export_feeds: "–ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–π –µ–º–∏—Å–∏–∏ –≤ OPML —Ñ–∞–π–ª",
        import_feeds: "–ò–º–ø–æ—Ä—Ç–∏—Ä–∞–π –µ–º–∏—Å–∏–∏ –æ—Ç OPML —Ñ–∞–π–ª",
        install_app: "–ò–Ω—Å—Ç–∞–ª–∏—Ä–∞–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–∞—Ç–æ PWA",
        clear_all_feeds: "–ò–∑—Ç—Ä–∏–π –≤—Å–∏—á–∫–∏ RSS –µ–º–∏—Å–∏–∏",

        // –ò–∑–≤–µ—Å—Ç–∏—è
        feed_added: "–ï–º–∏—Å–∏—è—Ç–∞ –µ –¥–æ–±–∞–≤–µ–Ω–∞",
        feed_removed: "–ï–º–∏—Å–∏—è—Ç–∞ –µ –ø—Ä–µ–º–∞—Ö–Ω–∞—Ç–∞",
        category_added: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ –µ –¥–æ–±–∞–≤–µ–Ω–∞",
        error_invalid_url: "–ù–µ–≤–∞–ª–∏–¥–µ–Ω URL",
        error_feed_exists: "–ï–º–∏—Å–∏—è—Ç–∞ –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞",

        // –ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª–∏ –∏ —Å—ä–æ–±—â–µ–Ω–∏—è
        no_feeds_message: "–ù—è–º–∞ –µ–º–∏—Å–∏–∏ –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ",
        loading_feed: "–ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –µ–º–∏—Å–∏—è...",
        feed_load_error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –µ–º–∏—Å–∏—è",
        no_articles: "–ù—è–º–∞ —Å—Ç–∞—Ç–∏–∏ –≤ —Ç–∞–∑–∏ –µ–º–∏—Å–∏—è",

        // –ë—É—Ç–æ–Ω–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è
        add_feed: "–î–æ–±–∞–≤–∏ –µ–º–∏—Å–∏—è",
        remove_feed: "–ü—Ä–µ–º–∞—Ö–Ω–∏ –µ–º–∏—Å–∏—è",
        edit_feed: "–†–µ–¥–∞–∫—Ç–∏—Ä–∞–π –µ–º–∏—Å–∏—è",
        refresh_feed: "–û–±–Ω–æ–≤–∏ –µ–º–∏—Å–∏—è",

        // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        no_category: "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
        create_category: "–°—ä–∑–¥–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
        category_name: "–ò–º–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è",

        // –¢—ä—Ä—Å–µ–Ω–µ
        search_placeholder: "–¢—ä—Ä—Å–∏ —Å—Ç–∞—Ç–∏–∏...",
        no_search_results: "–ù–∏—â–æ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–æ",

        // –í—Ä–µ–º–µ
        just_now: "—Ç–æ–∫—É-—â–æ",
        minutes_ago: "–º–∏–Ω—É—Ç–∏ –ø—Ä–µ–¥–∏",
        hours_ago: "—á–∞—Å–æ–≤–µ –ø—Ä–µ–¥–∏",
        days_ago: "–¥–Ω–∏ –ø—Ä–µ–¥–∏",

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_feeds: "–û–±—â–æ –µ–º–∏—Å–∏–∏",
        total_articles: "–û–±—â–æ —Å—Ç–∞—Ç–∏–∏",
        last_update: "–ü–æ—Å–ª–µ–¥–Ω–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è",

        // –ü—Ä–µ–ø–æ—Ä—ä–∫–∏
        recommended_rss_feeds: "–ü—Ä–µ–ø–æ—Ä—ä—á–∞–Ω–∏ RSS –µ–º–∏—Å–∏–∏",
        recommendations_description: "–ò–∑–±–µ—Ä–µ—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–∏ –∏–∑—Ç–æ—á–Ω–∏—Ü–∏ –Ω–∞ –Ω–æ–≤–∏–Ω–∏ –ø–æ —Ç–µ–º–∏, –∫–æ–∏—Ç–æ –≤–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É–≤–∞—Ç",
        close_recommendations: "–ó–∞—Ç–≤–æ—Ä–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏",
        settings: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        statistics: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
        export: "–ï–∫—Å–ø–æ—Ä—Ç",
        all: "–í—Å–∏—á–∫–∏",
        add_feed: "–î–æ–±–∞–≤–∏",
        added: "–î–æ–±–∞–≤–µ–Ω–æ",
        quality: "–ö–∞—á–µ—Å—Ç–≤–æ",
        language: "–ï–∑–∏–∫",
        country: "–°—Ç—Ä–∞–Ω–∞",
        no_recommendations: "–ù—è–º–∞ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏ –∑–∞ –∏–∑–±—Ä–∞–Ω–∏—Ç–µ —Ñ–∏–ª—Ç—Ä–∏",

        // –ú–æ–¥–∞–ª–µ–Ω –ø—Ä–æ–∑–æ—Ä–µ—Ü –∑–∞ –Ω–æ–≤–∏–Ω–∏
        publication_date: "–î–∞—Ç–∞ –Ω–∞ –ø—É–±–ª–∏–∫—É–≤–∞–Ω–µ",
        article_author: "–ê–≤—Ç–æ—Ä –Ω–∞ —Å—Ç–∞—Ç–∏—è—Ç–∞",
        author: "–ê–≤—Ç–æ—Ä",
        go_to_source: "–û—Ç–∏–¥–∏ –∫—ä–º –∏–∑—Ç–æ—á–Ω–∏–∫–∞",
        page_load_error: "–ù–µ—É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞",
        embedding_not_allowed: "–°–∞–π—Ç—ä—Ç –Ω–µ –ø–æ–∑–≤–æ–ª—è–≤–∞ –≤–≥—Ä–∞–∂–¥–∞–Ω–µ –∏–ª–∏ –Ω–µ –µ –¥–æ—Å—Ç—ä–ø–µ–Ω.",
        open_in_new_tab: "–û—Ç–≤–æ—Ä–∏ –≤ –Ω–æ–≤ —Ç–∞–±",

        // –§–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –≤—Ä–µ–º–µ
        now: "—Å–µ–≥–∞",
        minute: "–º–∏–Ω—É—Ç–∞",
        minutes: "–º–∏–Ω—É—Ç–∏",
        hour: "—á–∞—Å",
        hours: "—á–∞—Å–∞",
        day: "–¥–µ–Ω",
        days: "–¥–Ω–∏",
        week: "—Å–µ–¥–º–∏—Ü–∞",
        weeks: "—Å–µ–¥–º–∏—Ü–∏",
        month: "–º–µ—Å–µ—Ü",
        months: "–º–µ—Å–µ—Ü–∞",
        year: "–≥–æ–¥–∏–Ω–∞",
        years: "–≥–æ–¥–∏–Ω–∏",
        ago: "–ø—Ä–µ–¥–∏",

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations_statistics: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏—Ç–µ",
        general_info: "–û–±—â–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        total_feeds: "–û–±—â–æ –µ–º–∏—Å–∏–∏",
        total_categories: "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
        total_countries: "–°—Ç—Ä–∞–Ω–∏",
        quality_distribution: "–†–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—á–µ—Å—Ç–≤–æ",
        high_quality: "–í–∏—Å–æ–∫–æ (9-10)",
        medium_quality: "–°—Ä–µ–¥–Ω–æ (7-8)",
        low_quality: "–ù–∏—Å–∫–æ (1-6)",
        languages: "–ï–∑–∏—Ü–∏",
        top_countries: "–¢–æ–ø —Å—Ç—Ä–∞–Ω–∏",
        categories_stats: "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
        close_statistics: "–ó–∞—Ç–≤–æ—Ä–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
        close_settings: "–ó–∞—Ç–≤–æ—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        settings_saved: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏—Ç–µ —Å–∞ –∑–∞–ø–∞–∑–µ–Ω–∏",
        settings_reset: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏—Ç–µ —Å–∞ –Ω—É–ª–∏—Ä–∞–Ω–∏",

        // –î–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∏ –ø—Ä–µ–≤–æ–¥–∏ –∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        close_statistics: "–ó–∞—Ç–≤–æ—Ä–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
    },

    sr: {
        // Glavni interfejs
        rss_url_label: "URL RSS kanala",
        rss_url_placeholder: "Unesite URL RSS kanala",
        rss_help: "Unesite potpunu URL RSS ili Atom kanala",
        category_label: "Kategorija",
        category_select_aria: "Izaberite kategoriju",
        all_categories: "Sve kategorije",
        add_feed_btn: "Dodaj",
        add_help: "Dodaj RSS kanal u izabranu kategoriju",
        add_category_btn: "Dodaj kategoriju",

        // Navigacija
        refresh: "Osve≈æi",
        scroll_top: "Na vrh",
        theme: "Tema",
        recommendations: "Preporuke",
        menu: "Meni",

        // Modalni prozori
        share: "Podeli",
        copy_link: "Kopiraj link",
        close: "Zatvori",

        // Podno≈æje
        footer_description: "Moderni RSS ƒçitaƒç sa podr≈°kom za vi≈°e jezika i lepim dizajnom",
        footer_features: "Moguƒánosti",
        footer_multilingual: "Vi≈°ejeziƒçnost",
        footer_offline: "Offline re≈æim",
        footer_search: "Pretraga ƒçlanaka",
        footer_categories: "Kategorije",
        footer_languages: "Jezici",
        footer_created_by: "Napravljeno sa ‚ù§Ô∏è",
        footer_year: "2025",

        // Mobilni meni
        actions_menu_title: "Akcije",
        close_menu: "Zatvori meni",
        actions_navigation: "Navigacija akcija",
        main_actions_section: "Glavne akcije",
        refresh_feed: "Osve≈æi kanal",
        refresh_all_feeds: "Osve≈æi sve kanale",
        change_theme: "Promeni temu",
        feed_management_section: "Upravljanje kanalima",
        recommended_feeds: "Preporuƒçeni kanali",
        export_feeds: "Izvoz kanala",
        import_feeds: "Uvoz kanala",
        install_app: "Instaliraj aplikaciju",
        dangerous_actions_section: "Opasne akcije",
        clear_all_feeds: "Obri≈°i sve kanale",

        // Modalni prozori
        close_modal: "Zatvori modalni prozor",
        normal_mode: "Normalni",
        web_mode: "Veb stranica",
        share_modal_title: "Podeli",
        close_share_modal: "Zatvori prozor za deljenje",
        close_feed_manage: "Zatvori upravljanje kanalima",
        feed_management_title: "Upravljanje kanalima",

        // Dodatni prevodi
        refresh_all_feeds: "Osve≈æi sve kanale",
        export_feeds: "Izvezi kanale u OPML fajl",
        import_feeds: "Uvezi kanale iz OPML fajla",
        install_app: "Instaliraj aplikaciju kao PWA",
        clear_all_feeds: "Obri≈°i sve RSS kanale",

        // Obave≈°tenja
        feed_added: "Kanal je dodat",
        feed_removed: "Kanal je uklonjen",
        category_added: "Kategorija je dodana",
        error_invalid_url: "Neispravna URL",
        error_feed_exists: "Kanal veƒá postoji",

        // Zamenski tekst i poruke
        no_feeds_message: "Nema kanala za prikaz",
        loading_feed: "Uƒçitavanje kanala...",
        feed_load_error: "Gre≈°ka pri uƒçitavanju kanala",
        no_articles: "Nema ƒçlanaka u ovom kanalu",

        // Dugmad i akcije
        add_feed: "Dodaj kanal",
        remove_feed: "Ukloni kanal",
        edit_feed: "Uredi kanal",
        refresh_feed: "Osve≈æi kanal",

        // Kategorije
        no_category: "Bez kategorije",
        create_category: "Kreiraj kategoriju",
        category_name: "Ime kategorije",

        // Pretraga
        search_placeholder: "Pretra≈æi ƒçlanke...",
        no_search_results: "Ni≈°ta nije pronaƒëeno",

        // Vreme
        just_now: "upravo sada",
        minutes_ago: "minuta ranije",
        hours_ago: "sati ranije",
        days_ago: "dana ranije",

        // Statistike
        total_feeds: "Ukupno kanala",
        total_articles: "Ukupno ƒçlanaka",
        last_update: "Poslednje a≈æuriranje",

        // Preporuke
        recommended_rss_feeds: "Preporuƒçeni RSS kanali",
        recommendations_description: "Izaberite kvalitetne izvore vesti na teme koje vas zanimaju",
        close_recommendations: "Zatvori preporuke",
        settings: "Pode≈°avanja",
        statistics: "Statistike",
        export: "Izvoz",
        all: "Svi",
        add_feed: "Dodaj",
        added: "Dodano",
        quality: "Kvalitet",
        language: "Jezik",
        country: "Zemlja",
        no_recommendations: "Nema preporuka za izabrane filtere",

        // Modalni prozor vesti
        publication_date: "Datum objavljivanja",
        article_author: "Autor ƒçlanka",
        author: "Autor",
        go_to_source: "Idi na izvor",
        page_load_error: "Neuspe≈°no uƒçitavanje stranice",
        embedding_not_allowed: "Sajt ne dozvoljava ugraƒëivanje ili nije dostupan.",
        open_in_new_tab: "Otvori u novom tabu",

        // Formatiranje vremena
        now: "sada",
        minute: "minut",
        minutes: "minuta",
        hour: "sat",
        hours: "sati",
        day: "dan",
        days: "dana",
        week: "nedelja",
        weeks: "nedelja",
        month: "mesec",
        months: "meseci",
        year: "godina",
        years: "godina",
        ago: "pre",

        // Statistike preporuka
        recommendations_statistics: "Statistike preporuka",
        general_info: "Op≈°te informacije",
        total_feeds: "Ukupno kanala",
        total_categories: "Kategorije",
        total_countries: "Zemlje",
        quality_distribution: "Raspodela kvaliteta",
        high_quality: "Visok (9-10)",
        medium_quality: "Srednji (7-8)",
        low_quality: "Nizak (1-6)",
        languages: "Jezici",
        top_countries: "Top zemlje",
        categories_stats: "Kategorije",
        close_statistics: "Zatvori statistike",
        close_settings: "Zatvori pode≈°avanja",
        settings_saved: "Pode≈°avanja saƒçuvana",
        settings_reset: "Pode≈°avanja resetovana",

        // Dodatni prevodi za statistike
        close_statistics: "Zatvori statistike"
    }
};

// –¢–µ–∫—É—â–∏–π —è–∑—ã–∫
let currentLanguage = 'ru';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ —Å–∏—Å—Ç–µ–º—ã
function detectSystemLanguage() {
    const browserLang = navigator.language || navigator.userLanguage;
    const langCode = browserLang.split('-')[0].toLowerCase();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —è–∑—ã–∫
    if (translations[langCode]) {
        return langCode;
    }

    // –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä—É—Å—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return 'ru';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏–ª–∏ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
function getPreferredLanguage() {
    const savedLang = localStorage.getItem('preferredLanguage');
    if (savedLang && translations[savedLang]) {
        return savedLang;
    }

    return detectSystemLanguage();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
function applyTranslations(lang) {
    const translation = translations[lang] || translations['ru'];

    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-i18n –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
    document.querySelectorAll('[data-i18n]').forEach(element => {
        const key = element.getAttribute('data-i18n');
        if (translation[key]) {
            element.textContent = translation[key];
        }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º placeholder'—ã
    document.querySelectorAll('[data-i18n-placeholder]').forEach(element => {
        const key = element.getAttribute('data-i18n-placeholder');
        if (translation[key]) {
            element.placeholder = translation[key];
        }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º aria-label –∞—Ç—Ä–∏–±—É—Ç—ã
    document.querySelectorAll('[data-i18n-aria]').forEach(element => {
        const key = element.getAttribute('data-i18n-aria');
        if (translation[key]) {
            element.setAttribute('aria-label', translation[key]);
        }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º lang –∞—Ç—Ä–∏–±—É—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
    document.documentElement.lang = lang;

    // –û–±–Ω–æ–≤–ª—è–µ–º title —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const titles = {
        ru: "Fluent RSS Reader ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π",
        en: "Fluent RSS Reader ‚Äî Personal News Aggregator",
        uk: "Fluent RSS Reader ‚Äî –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –Ω–æ–≤–∏–Ω",
        pl: "Fluent RSS Reader ‚Äî Osobisty agregator wiadomo≈õci",
        cs: "Fluent RSS Reader ‚Äî Osobn√≠ agreg√°tor zpr√°v",
        bg: "Fluent RSS Reader ‚Äî –õ–∏—á–µ–Ω –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –Ω–∞ –Ω–æ–≤–∏–Ω–∏",
        sr: "Fluent RSS Reader ‚Äî Liƒçni agregator vesti"
    };

    if (titles[lang]) {
        document.title = titles[lang];
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
function changeLanguage(lang) {
    if (!translations[lang]) {
        console.warn(`Language ${lang} not supported`);
        return;
    }

    currentLanguage = lang;
    localStorage.setItem('preferredLanguage', lang);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
    applyTranslations(lang);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —è–∑—ã–∫–∞
    const languageSelect = document.getElementById('languageSelect');
    if (languageSelect) {
        languageSelect.value = lang;
    }

    console.log(`üåç –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${lang}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —è–∑—ã–∫–∞
function initializeLanguage() {
    const preferredLang = getPreferredLanguage();

    console.log(`üåç –û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫: ${preferredLang}`);
    console.log(`üåç –Ø–∑—ã–∫ —Å–∏—Å—Ç–µ–º—ã: ${navigator.language}`);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫
    changeLanguage(preferredLang);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–∑—ã–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function () {
    initializeLanguage();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —è–∑—ã–∫–µ
    setTimeout(() => {
        showLanguageWelcome();
    }, 1000);
});

// –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.changeLanguage = changeLanguage;
window.detectSystemLanguage = detectSystemLanguage;
window.translations = translations;
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
function showLanguageWelcome() {
    const hasSeenWelcome = localStorage.getItem('hasSeenLanguageWelcome');

    if (!hasSeenWelcome) {
        const detectedLang = detectSystemLanguage();
        const langNames = {
            ru: '–†—É—Å—Å–∫–∏–π',
            en: 'English',
            uk: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
            pl: 'Polski',
            cs: 'ƒåe≈°tina',
            bg: '–ë—ä–ª–≥–∞—Ä—Å–∫–∏',
            sr: 'Srpski'
        };

        const message = currentLanguage === 'ru'
            ? `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ú—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –≤–∞—à —è–∑—ã–∫ –∫–∞–∫ ${langNames[detectedLang]}. –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ –≤—ã—à–µ.`
            : `Welcome! We automatically detected your language as ${langNames[detectedLang]}. You can change the language in the selector above.`;

        setTimeout(() => {
            showNotification(message, 'info', 5000);
            localStorage.setItem('hasSeenLanguageWelcome', 'true');
        }, 2000);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —è–∑—ã–∫–µ
function getLanguageInfo() {
    return {
        current: currentLanguage,
        detected: detectSystemLanguage(),
        browser: navigator.language,
        supported: Object.keys(translations),
        translations: translations[currentLanguage]
    };
}

// –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.getLanguageInfo = getLanguageInfo;
window.showLanguageWelcome = showLanguageWelcome;
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showTranslatedNotification(messageKey, type = 'success', duration = 3000) {
    const translation = translations[currentLanguage] || translations['ru'];
    const message = translation[messageKey] || messageKey;

    showNotification(message, type, duration);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function showNotification(message, type = 'success', duration = 3000) {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (!document.querySelector('.notification-styles')) {
        const style = document.createElement('style');
        style.className = 'notification-styles';
        style.textContent = `
            .notification {
                position: fixed;
                top: var(--spacing-xl);
                right: var(--spacing-xl);
                padding: var(--spacing-md) var(--spacing-lg);
                border-radius: var(--radius-md);
                color: white;
                font-weight: 500;
                z-index: var(--z-toast);
                opacity: 0;
                transform: translateX(100%);
                transition: all var(--transition-normal);
                max-width: 300px;
                word-wrap: break-word;
            }
            
            .notification.success {
                background: var(--success-color);
            }
            
            .notification.error {
                background: var(--error-color);
            }
            
            .notification.info {
                background: var(--info-color);
            }
            
            .notification.warning {
                background: var(--warning-color);
                color: var(--text-dark);
            }
            
            .notification.show {
                opacity: 1;
                transform: translateX(0);
            }
            
            @media (max-width: 768px) {
                .notification {
                    top: var(--spacing-lg);
                    right: var(--spacing-md);
                    left: var(--spacing-md);
                    max-width: none;
                }
            }
        `;
        document.head.appendChild(style);
    }

    document.body.appendChild(notification);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    setTimeout(() => notification.classList.add('show'), 100);

    // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, duration);
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
function updateDynamicTranslations() {
    const translation = translations[currentLanguage] || translations['ru'];

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const categorySelect = document.getElementById('categorySelect');
    if (categorySelect && categorySelect.options.length > 0) {
        categorySelect.options[0].textContent = translation.all_categories || '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    const placeholderElements = document.querySelectorAll('.placeholder h2, .placeholder p');
    placeholderElements.forEach(element => {
        if (element.tagName === 'H2') {
            element.textContent = 'Fluent RSS Reader';
        } else if (element.tagName === 'P') {
            element.textContent = translation.footer_description || '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π RSS-—Ä–∏–¥–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —è–∑—ã–∫–æ–≤ –∏ –∫—Ä–∞—Å–∏–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º';
        }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –∏ –∑–∞–≥—Ä—É–∑–∫–µ
    const loadingElements = document.querySelectorAll('[data-loading-text]');
    loadingElements.forEach(element => {
        const key = element.getAttribute('data-loading-text');
        if (translation[key]) {
            element.textContent = translation[key];
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
function t(key, fallback = '') {
    const translation = translations[currentLanguage] || translations['ru'];
    return translation[key] || fallback || key;
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞
function formatTimeAgo(date, lang = currentLanguage) {
    const now = new Date();
    const diffMs = now - new Date(date);
    const diffMins = Math.floor(diffMs / 60000);
    const diffHours = Math.floor(diffMs / 3600000);
    const diffDays = Math.floor(diffMs / 86400000);
    const diffWeeks = Math.floor(diffMs / 604800000);
    const diffMonths = Math.floor(diffMs / 2629746000);
    const diffYears = Math.floor(diffMs / 31556952000);

    const translation = translations[lang] || translations['ru'];

    if (diffMins < 1) {
        return translation.just_now || translation.now || '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    } else if (diffMins === 1) {
        return `1 ${translation.minute || '–º–∏–Ω—É—Ç–∞'} ${translation.ago || '–Ω–∞–∑–∞–¥'}`;
    } else if (diffMins < 60) {
        return `${diffMins} ${translation.minutes || '–º–∏–Ω—É—Ç'} ${translation.ago || '–Ω–∞–∑–∞–¥'}`;
    } else if (diffHours === 1) {
        return `1 ${translation.hour || '—á–∞—Å'} ${translation.ago || '–Ω–∞–∑–∞–¥'}`;
    } else if (diffHours < 24) {
        return `${diffHours} ${translation.hours || '—á–∞—Å–æ–≤'} ${translation.ago || '–Ω–∞–∑–∞–¥'}`;
    } else if (diffDays === 1) {
        return `1 ${translation.day || '–¥–µ–Ω—å'} ${translation.ago || '–Ω–∞–∑–∞–¥'}`;
    } else if (diffDays < 7) {
        return `${diffDays} ${translation.days || '–¥–Ω–µ–π'} ${translation.ago || '–Ω–∞–∑–∞–¥'}`;
    } else if (diffWeeks === 1) {
        return `1 ${translation.week || '–Ω–µ–¥–µ–ª—è'} ${translation.ago || '–Ω–∞–∑–∞–¥'}`;
    } else if (diffWeeks < 4) {
        return `${diffWeeks} ${translation.weeks || '–Ω–µ–¥–µ–ª—å'} ${translation.ago || '–Ω–∞–∑–∞–¥'}`;
    } else if (diffMonths === 1) {
        return `1 ${translation.month || '–º–µ—Å—è—Ü'} ${translation.ago || '–Ω–∞–∑–∞–¥'}`;
    } else if (diffMonths < 12) {
        return `${diffMonths} ${translation.months || '–º–µ—Å—è—Ü–µ–≤'} ${translation.ago || '–Ω–∞–∑–∞–¥'}`;
    } else if (diffYears === 1) {
        return `1 ${translation.year || '–≥–æ–¥'} ${translation.ago || '–Ω–∞–∑–∞–¥'}`;
    } else {
        return `${diffYears} ${translation.years || '–ª–µ—Ç'} ${translation.ago || '–Ω–∞–∑–∞–¥'}`;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
function updateAllTranslations(lang) {
    applyTranslations(lang);
    updateDynamicTranslations();

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ —Å—Ç–∞—Ç—å—è—Ö –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    const timeElements = document.querySelectorAll('.item-date[data-date]');
    timeElements.forEach(element => {
        const date = element.getAttribute('data-date');
        if (date) {
            element.textContent = formatTimeAgo(date, lang);
        }
    });
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
const originalChangeLanguage = changeLanguage;
changeLanguage = function (lang) {
    originalChangeLanguage(lang);
    updateAllTranslations(lang);
    updateAllDates();
    updatePlaceholders();

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
    if (currentItem && modal.classList.contains('visible')) {
        updateModalContent();
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç–∫—Ä—ã—Ç—ã
    const recommendationsModal = document.getElementById('recommendationsModal');
    if (recommendationsModal && recommendationsModal.classList.contains('visible')) {
        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å –Ω–æ–≤—ã–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
        recommendationsModal.remove();
        createRecommendationsModal();
        updateRecommendationsContent();
        document.getElementById('recommendationsModal').style.display = 'flex';
        setTimeout(() => document.getElementById('recommendationsModal').classList.add('visible'), 10);
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∏–º—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
function showContextualNotification(messageKey, context = {}, type = 'success', duration = 3000) {
    const translation = translations[currentLanguage] || translations['ru'];
    let message = translation[messageKey] || messageKey;

    // –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    Object.keys(context).forEach(key => {
        message = message.replace(`{${key}}`, context[key]);
    });

    showNotification(message, type, duration);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
function getCurrentTranslations() {
    return translations[currentLanguage] || translations['ru'];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤
function checkTranslationCompleteness() {
    const baseKeys = Object.keys(translations['ru']);
    const completeness = {};

    Object.keys(translations).forEach(lang => {
        const langKeys = Object.keys(translations[lang]);
        const missing = baseKeys.filter(key => !langKeys.includes(key));
        const extra = langKeys.filter(key => !baseKeys.includes(key));

        completeness[lang] = {
            total: baseKeys.length,
            translated: langKeys.length,
            missing: missing,
            extra: extra,
            percentage: Math.round((langKeys.length / baseKeys.length) * 100)
        };
    });

    return completeness;
}

window.t = t;
window.formatTimeAgo = formatTimeAgo;
window.updateAllTranslations = updateAllTranslations;
window.showContextualNotification = showContextualNotification;
window.getCurrentTranslations = getCurrentTranslations;
window.checkTranslationCompleteness = checkTranslationCompleteness;
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –ª–µ–Ω—Ç
function getLocalizedRecommendedFeeds() {
    const lang = currentLanguage;
    const translation = translations[lang] || translations['ru'];

    // –ë–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
    const localizedCategories = {
        ru: {
            "üåç –ú–∏—Ä–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏": "üåç –ú–∏—Ä–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",
            "üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            "üî¨ –ù–∞—É–∫–∞": "üî¨ –ù–∞—É–∫–∞",
            "‚öΩ –°–ø–æ—Ä—Ç": "‚öΩ –°–ø–æ—Ä—Ç",
            "üé¨ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "üé¨ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
            "üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞": "üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞",
            "üè• –ó–¥–æ—Ä–æ–≤—å–µ": "üè• –ó–¥–æ—Ä–æ–≤—å–µ",
            "üå± –≠–∫–æ–ª–æ–≥–∏—è": "üå± –≠–∫–æ–ª–æ–≥–∏—è"
        },
        en: {
            "üåç –ú–∏—Ä–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏": "üåç World News",
            "üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "üíª Technology",
            "üî¨ –ù–∞—É–∫–∞": "üî¨ Science",
            "‚öΩ –°–ø–æ—Ä—Ç": "‚öΩ Sports",
            "üé¨ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "üé¨ Entertainment",
            "üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞": "üí∞ Business",
            "üè• –ó–¥–æ—Ä–æ–≤—å–µ": "üè• Health",
            "üå± –≠–∫–æ–ª–æ–≥–∏—è": "üå± Environment"
        },
        uk: {
            "üåç –ú–∏—Ä–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏": "üåç –°–≤—ñ—Ç–æ–≤—ñ –Ω–æ–≤–∏–Ω–∏",
            "üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "üíª –¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó",
            "üî¨ –ù–∞—É–∫–∞": "üî¨ –ù–∞—É–∫–∞",
            "‚öΩ –°–ø–æ—Ä—Ç": "‚öΩ –°–ø–æ—Ä—Ç",
            "üé¨ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "üé¨ –†–æ–∑–≤–∞–≥–∏",
            "üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞": "üí∞ –ï–∫–æ–Ω–æ–º—ñ–∫–∞",
            "üè• –ó–¥–æ—Ä–æ–≤—å–µ": "üè• –ó–¥–æ—Ä–æ–≤'—è",
            "üå± –≠–∫–æ–ª–æ–≥–∏—è": "üå± –ï–∫–æ–ª–æ–≥—ñ—è"
        },
        pl: {
            "üåç –ú–∏—Ä–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏": "üåç Wiadomo≈õci ≈õwiatowe",
            "üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "üíª Technologia",
            "üî¨ –ù–∞—É–∫–∞": "üî¨ Nauka",
            "‚öΩ –°–ø–æ—Ä—Ç": "‚öΩ Sport",
            "üé¨ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "üé¨ Rozrywka",
            "üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞": "üí∞ Biznes",
            "üè• –ó–¥–æ—Ä–æ–≤—å–µ": "üè• Zdrowie",
            "üå± –≠–∫–æ–ª–æ–≥–∏—è": "üå± ≈örodowisko"
        },
        cs: {
            "üåç –ú–∏—Ä–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏": "üåç Svƒõtov√© zpr√°vy",
            "üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "üíª Technologie",
            "üî¨ –ù–∞—É–∫–∞": "üî¨ Vƒõda",
            "‚öΩ –°–ø–æ—Ä—Ç": "‚öΩ Sport",
            "üé¨ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "üé¨ Z√°bava",
            "üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞": "üí∞ Obchod",
            "üè• –ó–¥–æ—Ä–æ–≤—å–µ": "üè• Zdrav√≠",
            "üå± –≠–∫–æ–ª–æ–≥–∏—è": "üå± ≈Ωivotn√≠ prost≈ôed√≠"
        },
        bg: {
            "üåç –ú–∏—Ä–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏": "üåç –°–≤–µ—Ç–æ–≤–Ω–∏ –Ω–æ–≤–∏–Ω–∏",
            "üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            "üî¨ –ù–∞—É–∫–∞": "üî¨ –ù–∞—É–∫–∞",
            "‚öΩ –°–ø–æ—Ä—Ç": "‚öΩ –°–ø–æ—Ä—Ç",
            "üé¨ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "üé¨ –ó–∞–±–∞–≤–ª–µ–Ω–∏—è",
            "üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞": "üí∞ –ë–∏–∑–Ω–µ—Å",
            "üè• –ó–¥–æ—Ä–æ–≤—å–µ": "üè• –ó–¥—Ä–∞–≤–µ",
            "üå± –≠–∫–æ–ª–æ–≥–∏—è": "üå± –û–∫–æ–ª–Ω–∞ —Å—Ä–µ–¥–∞"
        },
        sr: {
            "üåç –ú–∏—Ä–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏": "üåç Svetske vesti",
            "üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "üíª Tehnologija",
            "üî¨ –ù–∞—É–∫–∞": "üî¨ Nauka",
            "‚öΩ –°–ø–æ—Ä—Ç": "‚öΩ Sport",
            "üé¨ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "üé¨ Zabava",
            "üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞": "üí∞ Biznis",
            "üè• –ó–¥–æ—Ä–æ–≤—å–µ": "üè• Zdravlje",
            "üå± –≠–∫–æ–ª–æ–≥–∏—è": "üå± ≈Ωivotna sredina"
        }
    };

    const categoryTranslations = localizedCategories[lang] || localizedCategories['ru'];
    const localizedFeeds = {};

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ª–µ–Ω—Ç—ã –ø–æ —è–∑—ã–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    Object.entries(RECOMMENDED_FEEDS).forEach(([originalCategory, feeds]) => {
        const localizedCategory = categoryTranslations[originalCategory] || originalCategory;

        // –§–∏–ª—å—Ç—Ä—É–µ–º –ª–µ–Ω—Ç—ã –ø–æ —è–∑—ã–∫—É
        const filteredFeeds = feeds.filter(feed => {
            // –ï—Å–ª–∏ —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä—É—Å—Å–∫–∏–π –∏–ª–∏ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ –ª–µ–Ω—Ç—ã
            if (['ru', 'uk'].includes(lang)) {
                return feed.language === 'ru' || feed.language === 'uk';
            }
            // –î–ª—è –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ + –ª–æ–∫–∞–ª—å–Ω—ã–µ –ª–µ–Ω—Ç—ã
            else if (lang === 'en') {
                return feed.language === 'en';
            }
            // –î–ª—è —Å–ª–∞–≤—è–Ω—Å–∫–∏—Ö —è–∑—ã–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ + —Ä—É—Å—Å–∫–∏–µ –ª–µ–Ω—Ç—ã
            else {
                return feed.language === 'en' || feed.language === 'ru';
            }
        });

        if (filteredFeeds.length > 0) {
            localizedFeeds[localizedCategory] = filteredFeeds;
        }
    });

    return localizedFeeds;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —è–∑—ã–∫—É
function getLanguageSpecificRecommendations(targetLang = currentLanguage) {
    const languageFeeds = {};

    Object.entries(RECOMMENDED_FEEDS).forEach(([category, feeds]) => {
        const filteredFeeds = feeds.filter(feed => {
            // –õ–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —è–∑—ã–∫–∞–º
            switch (targetLang) {
                case 'ru':
                case 'uk':
                case 'bg':
                case 'sr':
                    return ['ru', 'uk', 'bg', 'sr'].includes(feed.language);
                case 'pl':
                case 'cs':
                    return ['en', 'ru', 'pl', 'cs'].includes(feed.language);
                case 'en':
                default:
                    return feed.language === 'en';
            }
        });

        if (filteredFeeds.length > 0) {
            languageFeeds[category] = filteredFeeds;
        }
    });

    return languageFeeds;
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞—Ç –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
function updateAllDates() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—ã –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
    const dateElements = document.querySelectorAll('.item-date[data-date]');
    dateElements.forEach(element => {
        const date = element.getAttribute('data-date');
        if (date) {
            element.textContent = formatDate(date);
            element.title = t('publication_date', '–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
        }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—ã –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    const modalDateElements = document.querySelectorAll('.modal-date');
    modalDateElements.forEach(element => {
        if (currentItem && currentItem.pubDate) {
            element.innerHTML = `üìÖ ${formatDate(currentItem.pubDate)}`;
            element.title = t('publication_date', '–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
        }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–æ–≤ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    const modalAuthorElements = document.querySelectorAll('.modal-author');
    modalAuthorElements.forEach(element => {
        if (currentItem && currentItem.author) {
            element.innerHTML = `‚úçÔ∏è ${currentItem.author}`;
            element.title = t('article_author', '–ê–≤—Ç–æ—Ä —Å—Ç–∞—Ç—å–∏');
        }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    const sourceLinks = document.querySelectorAll('.source-link');
    sourceLinks.forEach(link => {
        if (link.textContent.includes('üîó')) {
            link.textContent = `üîó ${t('go_to_source', '–ü–µ—Ä–µ–π—Ç–∏ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É')}`;
        } else if (link.textContent.includes('–û—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ') || link.textContent.includes('Open in new tab')) {
            link.textContent = `üîó ${t('open_in_new_tab', '–û—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ')}`;
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
function getLocalizedErrorMessage(errorType) {
    const errorMessages = {
        network: t('network_error', '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏'),
        invalid_feed: t('invalid_feed', '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–µ–Ω—Ç—ã'),
        not_found: t('feed_not_found', '–õ–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'),
        access_denied: t('access_denied', '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'),
        loading: t('loading', '–ó–∞–≥—Ä—É–∑–∫–∞...'),
        error: t('error', '–û—à–∏–±–∫–∞')
    };

    return errorMessages[errorType] || errorMessages.error;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
function updatePlaceholders() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –ø–æ–∏—Å–∫–∞ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    const searchInputs = document.querySelectorAll('input[type="search"], input[placeholder*="–ø–æ–∏—Å–∫"], input[placeholder*="search"]');
    searchInputs.forEach(input => {
        input.placeholder = t('search_placeholder', '–ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∞—Ç—å—è–º...');
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ
    const loadingElements = document.querySelectorAll('.loading-message, .loading-text');
    loadingElements.forEach(element => {
        element.textContent = t('loading', '–ó–∞–≥—Ä—É–∑–∫–∞...');
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
    const errorElements = document.querySelectorAll('.error-message, .error-text');
    errorElements.forEach(element => {
        if (element.textContent.includes('–û—à–∏–±–∫–∞') || element.textContent.includes('Error')) {
            element.textContent = t('error', '–û—à–∏–±–∫–∞');
        }
    });
}
// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞ –∏ —á–∏—Å–ª–∞
function getFeedsWord(count) {
    const lang = currentLanguage;

    switch (lang) {
        case 'ru':
            if (count % 10 === 1 && count % 100 !== 11) return '–ª–µ–Ω—Ç–∞';
            if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return '–ª–µ–Ω—Ç—ã';
            return '–ª–µ–Ω—Ç';
        case 'en':
            return count === 1 ? 'feed' : 'feeds';
        case 'uk':
            if (count % 10 === 1 && count % 100 !== 11) return '—Å—Ç—Ä—ñ—á–∫–∞';
            if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return '—Å—Ç—Ä—ñ—á–∫–∏';
            return '—Å—Ç—Ä—ñ—á–æ–∫';
        case 'pl':
            if (count === 1) return 'kana≈Ç';
            if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return 'kana≈Çy';
            return 'kana≈Ç√≥w';
        case 'cs':
            if (count === 1) return 'kan√°l';
            if ([2, 3, 4].includes(count)) return 'kan√°ly';
            return 'kan√°l≈Ø';
        case 'bg':
            return count === 1 ? '–µ–º–∏—Å–∏—è' : '–µ–º–∏—Å–∏–∏';
        case 'sr':
            if (count % 10 === 1 && count % 100 !== 11) return 'kanal';
            if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return 'kanala';
            return 'kanala';
        default:
            return '–ª–µ–Ω—Ç';
    }
}

function getCategoriesWord(count) {
    const lang = currentLanguage;

    switch (lang) {
        case 'ru':
            if (count % 10 === 1 && count % 100 !== 11) return '–∫–∞—Ç–µ–≥–æ—Ä–∏—è';
            if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
            return '–∫–∞—Ç–µ–≥–æ—Ä–∏–π';
        case 'en':
            return count === 1 ? 'category' : 'categories';
        case 'uk':
            if (count % 10 === 1 && count % 100 !== 11) return '–∫–∞—Ç–µ–≥–æ—Ä—ñ—è';
            if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return '–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó';
            return '–∫–∞—Ç–µ–≥–æ—Ä—ñ–π';
        case 'pl':
            if (count === 1) return 'kategoria';
            if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return 'kategorie';
            return 'kategorii';
        case 'cs':
            if (count === 1) return 'kategorie';
            if ([2, 3, 4].includes(count)) return 'kategorie';
            return 'kategori√≠';
        case 'bg':
            return count === 1 ? '–∫–∞—Ç–µ–≥–æ—Ä–∏—è' : '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
        case 'sr':
            if (count % 10 === 1 && count % 100 !== 11) return 'kategorija';
            if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return 'kategorije';
            return 'kategorija';
        default:
            return '–∫–∞—Ç–µ–≥–æ—Ä–∏–π';
    }
}

function getCountriesWord(count) {
    const lang = currentLanguage;

    switch (lang) {
        case 'ru':
            if (count % 10 === 1 && count % 100 !== 11) return '—Å—Ç—Ä–∞–Ω–∞';
            if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return '—Å—Ç—Ä–∞–Ω—ã';
            return '—Å—Ç—Ä–∞–Ω';
        case 'en':
            return count === 1 ? 'country' : 'countries';
        case 'uk':
            if (count % 10 === 1 && count % 100 !== 11) return '–∫—Ä–∞—ó–Ω–∞';
            if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return '–∫—Ä–∞—ó–Ω–∏';
            return '–∫—Ä–∞—ó–Ω';
        case 'pl':
            if (count === 1) return 'kraj';
            if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return 'kraje';
            return 'kraj√≥w';
        case 'cs':
            if (count === 1) return 'zemƒõ';
            if ([2, 3, 4].includes(count)) return 'zemƒõ';
            return 'zem√≠';
        case 'bg':
            return count === 1 ? '—Å—Ç—Ä–∞–Ω–∞' : '—Å—Ç—Ä–∞–Ω–∏';
        case 'sr':
            if (count % 10 === 1 && count % 100 !== 11) return 'zemlja';
            if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return 'zemlje';
            return 'zemalja';
        default:
            return '—Å—Ç—Ä–∞–Ω';
    }
}

function getLanguageName(langCode) {
    const lang = currentLanguage;

    const languageNames = {
        ru: {
            'ru': '–†—É—Å—Å–∫–∏–π',
            'en': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
            'uk': '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π',
            'pl': '–ü–æ–ª—å—Å–∫–∏–π',
            'cs': '–ß–µ—à—Å–∫–∏–π',
            'bg': '–ë–æ–ª–≥–∞—Ä—Å–∫–∏–π',
            'sr': '–°–µ—Ä–±—Å–∫–∏–π'
        },
        en: {
            'ru': 'Russian',
            'en': 'English',
            'uk': 'Ukrainian',
            'pl': 'Polish',
            'cs': 'Czech',
            'bg': 'Bulgarian',
            'sr': 'Serbian'
        },
        uk: {
            'ru': '–†–æ—Å—ñ–π—Å—å–∫–∞',
            'en': '–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞',
            'uk': '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
            'pl': '–ü–æ–ª—å—Å—å–∫–∞',
            'cs': '–ß–µ—Å—å–∫–∞',
            'bg': '–ë–æ–ª–≥–∞—Ä—Å—å–∫–∞',
            'sr': '–°–µ—Ä–±—Å—å–∫–∞'
        },
        pl: {
            'ru': 'Rosyjski',
            'en': 'Angielski',
            'uk': 'Ukrai≈Ñski',
            'pl': 'Polski',
            'cs': 'Czeski',
            'bg': 'Bu≈Çgarski',
            'sr': 'Serbski'
        },
        cs: {
            'ru': 'Ru≈°tina',
            'en': 'Angliƒçtina',
            'uk': 'Ukrajin≈°tina',
            'pl': 'Pol≈°tina',
            'cs': 'ƒåe≈°tina',
            'bg': 'Bulhar≈°tina',
            'sr': 'Srb≈°tina'
        },
        bg: {
            'ru': '–†—É—Å–∫–∏',
            'en': '–ê–Ω–≥–ª–∏–π—Å–∫–∏',
            'uk': '–£–∫—Ä–∞–∏–Ω—Å–∫–∏',
            'pl': '–ü–æ–ª—Å–∫–∏',
            'cs': '–ß–µ—à–∫–∏',
            'bg': '–ë—ä–ª–≥–∞—Ä—Å–∫–∏',
            'sr': '–°—Ä—ä–±—Å–∫–∏'
        },
        sr: {
            'ru': 'Ruski',
            'en': 'Engleski',
            'uk': 'Ukrajinski',
            'pl': 'Poljski',
            'cs': 'ƒåe≈°ki',
            'bg': 'Bugarski',
            'sr': 'Srpski'
        }
    };

    return languageNames[lang]?.[langCode] || langCode.toUpperCase();
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function getLocalizedCategoryName(originalCategory) {
    const lang = currentLanguage;

    const categoryTranslations = {
        ru: {
            "üåç –ú–∏—Ä–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏": "üåç –ú–∏—Ä–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",
            "üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            "üî¨ –ù–∞—É–∫–∞": "üî¨ –ù–∞—É–∫–∞",
            "‚öΩ –°–ø–æ—Ä—Ç": "‚öΩ –°–ø–æ—Ä—Ç",
            "üé¨ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "üé¨ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
            "üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞": "üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞",
            "üè• –ó–¥–æ—Ä–æ–≤—å–µ": "üè• –ó–¥–æ—Ä–æ–≤—å–µ",
            "üå± –≠–∫–æ–ª–æ–≥–∏—è": "üå± –≠–∫–æ–ª–æ–≥–∏—è"
        },
        en: {
            "üåç –ú–∏—Ä–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏": "üåç World News",
            "üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "üíª Technology",
            "üî¨ –ù–∞—É–∫–∞": "üî¨ Science",
            "‚öΩ –°–ø–æ—Ä—Ç": "‚öΩ Sports",
            "üé¨ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "üé¨ Entertainment",
            "üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞": "üí∞ Business",
            "üè• –ó–¥–æ—Ä–æ–≤—å–µ": "üè• Health",
            "üå± –≠–∫–æ–ª–æ–≥–∏—è": "üå± Environment"
        },
        uk: {
            "üåç –ú–∏—Ä–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏": "üåç –°–≤—ñ—Ç–æ–≤—ñ –Ω–æ–≤–∏–Ω–∏",
            "üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "üíª –¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó",
            "üî¨ –ù–∞—É–∫–∞": "üî¨ –ù–∞—É–∫–∞",
            "‚öΩ –°–ø–æ—Ä—Ç": "‚öΩ –°–ø–æ—Ä—Ç",
            "üé¨ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "üé¨ –†–æ–∑–≤–∞–≥–∏",
            "üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞": "üí∞ –ï–∫–æ–Ω–æ–º—ñ–∫–∞",
            "üè• –ó–¥–æ—Ä–æ–≤—å–µ": "üè• –ó–¥–æ—Ä–æ–≤'—è",
            "üå± –≠–∫–æ–ª–æ–≥–∏—è": "üå± –ï–∫–æ–ª–æ–≥—ñ—è"
        },
        pl: {
            "üåç –ú–∏—Ä–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏": "üåç Wiadomo≈õci ≈õwiatowe",
            "üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "üíª Technologia",
            "üî¨ –ù–∞—É–∫–∞": "üî¨ Nauka",
            "‚öΩ –°–ø–æ—Ä—Ç": "‚öΩ Sport",
            "üé¨ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "üé¨ Rozrywka",
            "üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞": "üí∞ Biznes",
            "üè• –ó–¥–æ—Ä–æ–≤—å–µ": "üè• Zdrowie",
            "üå± –≠–∫–æ–ª–æ–≥–∏—è": "üå± ≈örodowisko"
        },
        cs: {
            "üåç –ú–∏—Ä–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏": "üåç Svƒõtov√© zpr√°vy",
            "üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "üíª Technologie",
            "üî¨ –ù–∞—É–∫–∞": "üî¨ Vƒõda",
            "‚öΩ –°–ø–æ—Ä—Ç": "‚öΩ Sport",
            "üé¨ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "üé¨ Z√°bava",
            "üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞": "üí∞ Obchod",
            "üè• –ó–¥–æ—Ä–æ–≤—å–µ": "üè• Zdrav√≠",
            "üå± –≠–∫–æ–ª–æ–≥–∏—è": "üå± ≈Ωivotn√≠ prost≈ôed√≠"
        },
        bg: {
            "üåç –ú–∏—Ä–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏": "üåç –°–≤–µ—Ç–æ–≤–Ω–∏ –Ω–æ–≤–∏–Ω–∏",
            "üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            "üî¨ –ù–∞—É–∫–∞": "üî¨ –ù–∞—É–∫–∞",
            "‚öΩ –°–ø–æ—Ä—Ç": "‚öΩ –°–ø–æ—Ä—Ç",
            "üé¨ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "üé¨ –ó–∞–±–∞–≤–ª–µ–Ω–∏—è",
            "üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞": "üí∞ –ë–∏–∑–Ω–µ—Å",
            "üè• –ó–¥–æ—Ä–æ–≤—å–µ": "üè• –ó–¥—Ä–∞–≤–µ",
            "üå± –≠–∫–æ–ª–æ–≥–∏—è": "üå± –û–∫–æ–ª–Ω–∞ —Å—Ä–µ–¥–∞"
        },
        sr: {
            "üåç –ú–∏—Ä–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏": "üåç Svetske vesti",
            "üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "üíª Tehnologija",
            "üî¨ –ù–∞—É–∫–∞": "üî¨ Nauka",
            "‚öΩ –°–ø–æ—Ä—Ç": "‚öΩ Sport",
            "üé¨ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "üé¨ Zabava",
            "üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞": "üí∞ Biznis",
            "üè• –ó–¥–æ—Ä–æ–≤—å–µ": "üè• Zdravlje",
            "üå± –≠–∫–æ–ª–æ–≥–∏—è": "üå± ≈Ωivotna sredina"
        }
    };

    return categoryTranslations[lang]?.[originalCategory] || originalCategory;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
function getCategoryStats() {
    const categoryStats = {};

    Object.entries(RECOMMENDED_FEEDS).forEach(([originalCategory, feeds]) => {
        const localizedName = getLocalizedCategoryName(originalCategory);
        categoryStats[localizedName] = {
            original: originalCategory,
            localized: localizedName,
            count: feeds.length,
            feeds: feeds
        };
    });

    return categoryStats;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
function createCategoryStatsCard() {
    const categoryStats = getCategoryStats();
    const translation = translations[currentLanguage] || translations['ru'];

    const sortedCategories = Object.entries(categoryStats)
        .sort(([, a], [, b]) => b.count - a.count);

    return `
        <div class="stat-card">
            <h4>üìÇ ${t('categories_distribution', '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')}</h4>
            ${sortedCategories.map(([localizedName, data]) => {
        const feedsWord = getFeedsWord(data.count);
        return `<p><strong>${localizedName}:</strong> ${data.count} ${feedsWord}</p>`;
    }).join('')}
        </div>
    `;
}
// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
function getFeedsWord(count) {
    const lang = currentLanguage;

    switch (lang) {
        case 'ru':
            if (count % 10 === 1 && count % 100 !== 11) return '–ª–µ–Ω—Ç–∞';
            if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return '–ª–µ–Ω—Ç—ã';
            return '–ª–µ–Ω—Ç';
        case 'uk':
            if (count % 10 === 1 && count % 100 !== 11) return '—Å—Ç—Ä—ñ—á–∫–∞';
            if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return '—Å—Ç—Ä—ñ—á–∫–∏';
            return '—Å—Ç—Ä—ñ—á–æ–∫';
        case 'pl':
            if (count === 1) return 'kana≈Ç';
            if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return 'kana≈Çy';
            return 'kana≈Ç√≥w';
        case 'cs':
            if (count === 1) return 'kan√°l';
            if ([2, 3, 4].includes(count)) return 'kan√°ly';
            return 'kan√°l≈Ø';
        case 'bg':
            if (count === 1) return '–µ–º–∏—Å–∏—è';
            return '–µ–º–∏—Å–∏–∏';
        case 'sr':
            if (count % 10 === 1 && count % 100 !== 11) return 'kanal';
            if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return 'kanala';
            return 'kanala';
        case 'en':
        default:
            return count === 1 ? 'feed' : 'feeds';
    }
}

function getCategoriesWord(count) {
    const lang = currentLanguage;

    switch (lang) {
        case 'ru':
            if (count % 10 === 1 && count % 100 !== 11) return '–∫–∞—Ç–µ–≥–æ—Ä–∏—è';
            if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
            return '–∫–∞—Ç–µ–≥–æ—Ä–∏–π';
        case 'uk':
            if (count % 10 === 1 && count % 100 !== 11) return '–∫–∞—Ç–µ–≥–æ—Ä—ñ—è';
            if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return '–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó';
            return '–∫–∞—Ç–µ–≥–æ—Ä—ñ–π';
        case 'pl':
            if (count === 1) return 'kategoria';
            if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return 'kategorie';
            return 'kategorii';
        case 'cs':
            if (count === 1) return 'kategorie';
            if ([2, 3, 4].includes(count)) return 'kategorie';
            return 'kategori√≠';
        case 'bg':
            if (count === 1) return '–∫–∞—Ç–µ–≥–æ—Ä–∏—è';
            return '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
        case 'sr':
            if (count % 10 === 1 && count % 100 !== 11) return 'kategorija';
            if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return 'kategorije';
            return 'kategorija';
        case 'en':
        default:
            return count === 1 ? 'category' : 'categories';
    }
}

function getCountriesWord(count) {
    const lang = currentLanguage;

    switch (lang) {
        case 'ru':
            if (count % 10 === 1 && count % 100 !== 11) return '—Å—Ç—Ä–∞–Ω–∞';
            if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return '—Å—Ç—Ä–∞–Ω—ã';
            return '—Å—Ç—Ä–∞–Ω';
        case 'uk':
            if (count % 10 === 1 && count % 100 !== 11) return '–∫—Ä–∞—ó–Ω–∞';
            if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return '–∫—Ä–∞—ó–Ω–∏';
            return '–∫—Ä–∞—ó–Ω';
        case 'pl':
            if (count === 1) return 'kraj';
            if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return 'kraje';
            return 'kraj√≥w';
        case 'cs':
            if (count === 1) return 'zemƒõ';
            if ([2, 3, 4].includes(count)) return 'zemƒõ';
            return 'zem√≠';
        case 'bg':
            if (count === 1) return '—Å—Ç—Ä–∞–Ω–∞';
            return '—Å—Ç—Ä–∞–Ω–∏';
        case 'sr':
            if (count % 10 === 1 && count % 100 !== 11) return 'zemlja';
            if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return 'zemlje';
            return 'zemalja';
        case 'en':
        default:
            return count === 1 ? 'country' : 'countries';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —è–∑—ã–∫–æ–≤
function getLanguageName(langCode) {
    const lang = currentLanguage;

    const languageNames = {
        ru: {
            'ru': '–†—É—Å—Å–∫–∏–π',
            'en': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
            'uk': '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π',
            'pl': '–ü–æ–ª—å—Å–∫–∏–π',
            'cs': '–ß–µ—à—Å–∫–∏–π',
            'bg': '–ë–æ–ª–≥–∞—Ä—Å–∫–∏–π',
            'sr': '–°–µ—Ä–±—Å–∫–∏–π'
        },
        en: {
            'ru': 'Russian',
            'en': 'English',
            'uk': 'Ukrainian',
            'pl': 'Polish',
            'cs': 'Czech',
            'bg': 'Bulgarian',
            'sr': 'Serbian'
        },
        uk: {
            'ru': '–†–æ—Å—ñ–π—Å—å–∫–∞',
            'en': '–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞',
            'uk': '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
            'pl': '–ü–æ–ª—å—Å—å–∫–∞',
            'cs': '–ß–µ—Å—å–∫–∞',
            'bg': '–ë–æ–ª–≥–∞—Ä—Å—å–∫–∞',
            'sr': '–°–µ—Ä–±—Å—å–∫–∞'
        },
        pl: {
            'ru': 'Rosyjski',
            'en': 'Angielski',
            'uk': 'Ukrai≈Ñski',
            'pl': 'Polski',
            'cs': 'Czeski',
            'bg': 'Bu≈Çgarski',
            'sr': 'Serbski'
        },
        cs: {
            'ru': 'Ru≈°tina',
            'en': 'Angliƒçtina',
            'uk': 'Ukrajin≈°tina',
            'pl': 'Pol≈°tina',
            'cs': 'ƒåe≈°tina',
            'bg': 'Bulhar≈°tina',
            'sr': 'Srb≈°tina'
        },
        bg: {
            'ru': '–†—É—Å–∫–∏',
            'en': '–ê–Ω–≥–ª–∏–π—Å–∫–∏',
            'uk': '–£–∫—Ä–∞–∏–Ω—Å–∫–∏',
            'pl': '–ü–æ–ª—Å–∫–∏',
            'cs': '–ß–µ—à–∫–∏',
            'bg': '–ë—ä–ª–≥–∞—Ä—Å–∫–∏',
            'sr': '–°—Ä—ä–±—Å–∫–∏'
        },
        sr: {
            'ru': 'Ruski',
            'en': 'Engleski',
            'uk': 'Ukrajinski',
            'pl': 'Poljski',
            'cs': 'ƒåe≈°ki',
            'bg': 'Bugarski',
            'sr': 'Srpski'
        }
    };

    return languageNames[lang]?.[langCode] || langCode.toUpperCase();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
function createCategoryStatsCard() {
    const translation = translations[currentLanguage] || translations['ru'];
    const categoryStats = {};

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ–Ω—Ç –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    Object.entries(RECOMMENDED_FEEDS).forEach(([category, feeds]) => {
        categoryStats[category] = feeds.length;
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª–µ–Ω—Ç
    const sortedCategories = Object.entries(categoryStats)
        .sort(([, a], [, b]) => b - a)
        .slice(0, 8); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-8 –∫–∞—Ç–µ–≥–æ—Ä–∏–π

    return `
        <div class="stat-card">
            <h4>üìÇ ${t('categories_stats', '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏')}</h4>
            ${sortedCategories.map(([category, count]) => {
        const feedsWord = getFeedsWord(count);
        return `<p><strong>${category}:</strong> ${count} ${feedsWord}</p>`;
    }).join('')}
        </div>
    `;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
function checkModalTranslationsCompleteness() {
    const requiredKeys = [
        'recommendation_settings', 'enable_recommendations', 'show_on_startup',
        'max_recommendations', 'min_quality', 'sort_by', 'sort_by_quality',
        'sort_by_name', 'sort_by_country', 'show_country_flags', 'group_by_country',
        'preferred_languages', 'categories_for_recommendations', 'save', 'reset',
        'recommendations_statistics', 'general_info', 'total_feeds', 'total_categories',
        'total_countries', 'quality_distribution', 'high_quality', 'medium_quality',
        'low_quality', 'languages', 'top_countries', 'categories_stats',
        'close_statistics', 'close_settings', 'settings_saved', 'settings_reset'
    ];

    const completeness = {};

    Object.keys(translations).forEach(lang => {
        const langTranslations = translations[lang];
        const missing = requiredKeys.filter(key => !langTranslations[key]);

        completeness[lang] = {
            total: requiredKeys.length,
            translated: requiredKeys.length - missing.length,
            missing: missing,
            percentage: Math.round(((requiredKeys.length - missing.length) / requiredKeys.length) * 100)
        };
    });

    console.log('üìä –ü–æ–ª–Ω–æ—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω:', completeness);
    return completeness;
}

// –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.testModalTranslations = testModalTranslations;
window.checkModalTranslationsCompleteness = checkModalTranslationsCompleteness;